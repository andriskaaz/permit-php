<?php
/**
 * ResourceRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Permit.io API
 *
 * Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ResourceRead Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResourceRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResourceRead';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'key' => 'string',
        'id' => 'string',
        'organization_id' => 'string',
        'project_id' => 'string',
        'environment_id' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'name' => 'string',
        'urn' => 'string',
        'description' => 'string',
        'actions' => 'array<string,\OpenAPI\Client\Model\ActionBlockRead>',
        'type_attributes' => 'object',
        'attributes' => 'array<string,\OpenAPI\Client\Model\AttributeBlockRead>',
        'roles' => 'array<string,\OpenAPI\Client\Model\ResourceRoleRead>',
        'relations' => 'array<string,\OpenAPI\Client\Model\RelationBlockRead>',
        'v1compat_path' => 'string',
        'v1compat_type' => 'string',
        'v1compat_name' => 'string',
        'action_groups' => 'array<string,string[]>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'key' => null,
        'id' => 'uuid',
        'organization_id' => 'uuid',
        'project_id' => 'uuid',
        'environment_id' => 'uuid',
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'name' => null,
        'urn' => null,
        'description' => null,
        'actions' => null,
        'type_attributes' => null,
        'attributes' => null,
        'roles' => null,
        'relations' => null,
        'v1compat_path' => null,
        'v1compat_type' => null,
        'v1compat_name' => null,
        'action_groups' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'key' => false,
        'id' => false,
        'organization_id' => false,
        'project_id' => false,
        'environment_id' => false,
        'created_at' => false,
        'updated_at' => false,
        'name' => false,
        'urn' => false,
        'description' => false,
        'actions' => false,
        'type_attributes' => false,
        'attributes' => false,
        'roles' => false,
        'relations' => false,
        'v1compat_path' => false,
        'v1compat_type' => false,
        'v1compat_name' => false,
        'action_groups' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'key',
        'id' => 'id',
        'organization_id' => 'organization_id',
        'project_id' => 'project_id',
        'environment_id' => 'environment_id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'name' => 'name',
        'urn' => 'urn',
        'description' => 'description',
        'actions' => 'actions',
        'type_attributes' => 'type_attributes',
        'attributes' => 'attributes',
        'roles' => 'roles',
        'relations' => 'relations',
        'v1compat_path' => 'v1compat_path',
        'v1compat_type' => 'v1compat_type',
        'v1compat_name' => 'v1compat_name',
        'action_groups' => 'action_groups'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'id' => 'setId',
        'organization_id' => 'setOrganizationId',
        'project_id' => 'setProjectId',
        'environment_id' => 'setEnvironmentId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'name' => 'setName',
        'urn' => 'setUrn',
        'description' => 'setDescription',
        'actions' => 'setActions',
        'type_attributes' => 'setTypeAttributes',
        'attributes' => 'setAttributes',
        'roles' => 'setRoles',
        'relations' => 'setRelations',
        'v1compat_path' => 'setV1compatPath',
        'v1compat_type' => 'setV1compatType',
        'v1compat_name' => 'setV1compatName',
        'action_groups' => 'setActionGroups'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'id' => 'getId',
        'organization_id' => 'getOrganizationId',
        'project_id' => 'getProjectId',
        'environment_id' => 'getEnvironmentId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'name' => 'getName',
        'urn' => 'getUrn',
        'description' => 'getDescription',
        'actions' => 'getActions',
        'type_attributes' => 'getTypeAttributes',
        'attributes' => 'getAttributes',
        'roles' => 'getRoles',
        'relations' => 'getRelations',
        'v1compat_path' => 'getV1compatPath',
        'v1compat_type' => 'getV1compatType',
        'v1compat_name' => 'getV1compatName',
        'action_groups' => 'getActionGroups'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('organization_id', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('environment_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('urn', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('actions', $data ?? [], null);
        $this->setIfExists('type_attributes', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('relations', $data ?? [], null);
        $this->setIfExists('v1compat_path', $data ?? [], null);
        $this->setIfExists('v1compat_type', $data ?? [], null);
        $this->setIfExists('v1compat_name', $data ?? [], null);
        $this->setIfExists('action_groups', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['key'] === null) {
            $invalidProperties[] = "'key' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['organization_id'] === null) {
            $invalidProperties[] = "'organization_id' can't be null";
        }
        if ($this->container['project_id'] === null) {
            $invalidProperties[] = "'project_id' can't be null";
        }
        if ($this->container['environment_id'] === null) {
            $invalidProperties[] = "'environment_id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key A URL-friendly name of the resource (i.e: slug). You will be able to query later using this key instead of the id (UUID) of the resource.
     *
     * @return self
     */
    public function setKey($key)
    {
        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique id of the resource
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return string
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param string $organization_id Unique id of the organization that the resource belongs to.
     *
     * @return self
     */
    public function setOrganizationId($organization_id)
    {
        if (is_null($organization_id)) {
            throw new \InvalidArgumentException('non-nullable organization_id cannot be null');
        }
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string $project_id Unique id of the project that the resource belongs to.
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        if (is_null($project_id)) {
            throw new \InvalidArgumentException('non-nullable project_id cannot be null');
        }
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets environment_id
     *
     * @return string
     */
    public function getEnvironmentId()
    {
        return $this->container['environment_id'];
    }

    /**
     * Sets environment_id
     *
     * @param string $environment_id Unique id of the environment that the resource belongs to.
     *
     * @return self
     */
    public function setEnvironmentId($environment_id)
    {
        if (is_null($environment_id)) {
            throw new \InvalidArgumentException('non-nullable environment_id cannot be null');
        }
        $this->container['environment_id'] = $environment_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Date and time when the resource was created (ISO_8601 format).
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Date and time when the resource was last updated/modified (ISO_8601 format).
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the resource
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets urn
     *
     * @return string|null
     */
    public function getUrn()
    {
        return $this->container['urn'];
    }

    /**
     * Sets urn
     *
     * @param string|null $urn The [URN](https://en.wikipedia.org/wiki/Uniform_Resource_Name) (Uniform Resource Name) of the resource
     *
     * @return self
     */
    public function setUrn($urn)
    {
        if (is_null($urn)) {
            throw new \InvalidArgumentException('non-nullable urn cannot be null');
        }
        $this->container['urn'] = $urn;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description An optional longer description of what this resource respresents in your system
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets actions
     *
     * @return array<string,\OpenAPI\Client\Model\ActionBlockRead>|null
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param array<string,\OpenAPI\Client\Model\ActionBlockRead>|null $actions A actions definition block, typically contained within a resource type definition block.         The actions represents the ways you can interact with a protected resource.
     *
     * @return self
     */
    public function setActions($actions)
    {
        if (is_null($actions)) {
            throw new \InvalidArgumentException('non-nullable actions cannot be null');
        }
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets type_attributes
     *
     * @return object|null
     */
    public function getTypeAttributes()
    {
        return $this->container['type_attributes'];
    }

    /**
     * Sets type_attributes
     *
     * @param object|null $type_attributes optional dictionary of key-value pairs that can be used to store arbitrary metadata about this resource. This metadata can be used to filter resource using query parameters with attr_ prefix
     *
     * @return self
     */
    public function setTypeAttributes($type_attributes)
    {
        if (is_null($type_attributes)) {
            throw new \InvalidArgumentException('non-nullable type_attributes cannot be null');
        }
        $this->container['type_attributes'] = $type_attributes;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return array<string,\OpenAPI\Client\Model\AttributeBlockRead>|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param array<string,\OpenAPI\Client\Model\AttributeBlockRead>|null $attributes Attributes that each resource of this type defines, and can be used in your ABAC policies.
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return array<string,\OpenAPI\Client\Model\ResourceRoleRead>|null
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param array<string,\OpenAPI\Client\Model\ResourceRoleRead>|null $roles Roles defined on this resource. The key is the role name, and the value contains the role properties such as granted permissions, etc.
     *
     * @return self
     */
    public function setRoles($roles)
    {
        if (is_null($roles)) {
            throw new \InvalidArgumentException('non-nullable roles cannot be null');
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets relations
     *
     * @return array<string,\OpenAPI\Client\Model\RelationBlockRead>|null
     */
    public function getRelations()
    {
        return $this->container['relations'];
    }

    /**
     * Sets relations
     *
     * @param array<string,\OpenAPI\Client\Model\RelationBlockRead>|null $relations A relations definition block, typically contained within a resource type definition block.         The relations represents the ways you can interact with a protected resource.
     *
     * @return self
     */
    public function setRelations($relations)
    {
        if (is_null($relations)) {
            throw new \InvalidArgumentException('non-nullable relations cannot be null');
        }
        $this->container['relations'] = $relations;

        return $this;
    }

    /**
     * Gets v1compat_path
     *
     * @return string|null
     */
    public function getV1compatPath()
    {
        return $this->container['v1compat_path'];
    }

    /**
     * Sets v1compat_path
     *
     * @param string|null $v1compat_path v1compat_path
     *
     * @return self
     */
    public function setV1compatPath($v1compat_path)
    {
        if (is_null($v1compat_path)) {
            throw new \InvalidArgumentException('non-nullable v1compat_path cannot be null');
        }
        $this->container['v1compat_path'] = $v1compat_path;

        return $this;
    }

    /**
     * Gets v1compat_type
     *
     * @return string|null
     */
    public function getV1compatType()
    {
        return $this->container['v1compat_type'];
    }

    /**
     * Sets v1compat_type
     *
     * @param string|null $v1compat_type v1compat_type
     *
     * @return self
     */
    public function setV1compatType($v1compat_type)
    {
        if (is_null($v1compat_type)) {
            throw new \InvalidArgumentException('non-nullable v1compat_type cannot be null');
        }
        $this->container['v1compat_type'] = $v1compat_type;

        return $this;
    }

    /**
     * Gets v1compat_name
     *
     * @return string|null
     */
    public function getV1compatName()
    {
        return $this->container['v1compat_name'];
    }

    /**
     * Sets v1compat_name
     *
     * @param string|null $v1compat_name v1compat_name
     *
     * @return self
     */
    public function setV1compatName($v1compat_name)
    {
        if (is_null($v1compat_name)) {
            throw new \InvalidArgumentException('non-nullable v1compat_name cannot be null');
        }
        $this->container['v1compat_name'] = $v1compat_name;

        return $this;
    }

    /**
     * Gets action_groups
     *
     * @return array<string,string[]>|null
     */
    public function getActionGroups()
    {
        return $this->container['action_groups'];
    }

    /**
     * Sets action_groups
     *
     * @param array<string,string[]>|null $action_groups action_groups
     *
     * @return self
     */
    public function setActionGroups($action_groups)
    {
        if (is_null($action_groups)) {
            throw new \InvalidArgumentException('non-nullable action_groups cannot be null');
        }
        $this->container['action_groups'] = $action_groups;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


