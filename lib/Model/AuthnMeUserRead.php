<?php
/**
 * AuthnMeUserRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Permit.io API
 *
 * Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AuthnMeUserRead Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AuthnMeUserRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AuthnMeUserRead';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'actor_type' => 'string',
        'id' => 'string',
        'key' => 'string',
        'org_id' => 'string',
        'project_id' => 'string',
        'env_id' => 'string',
        'tenant_id' => 'string',
        'email' => 'string',
        'name' => 'string',
        'given_name' => 'string',
        'family_name' => 'string',
        'picture' => 'string',
        'is_onboarding' => 'bool',
        'onboarding_step' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'actor_type' => null,
        'id' => 'uuid',
        'key' => null,
        'org_id' => 'uuid',
        'project_id' => 'uuid',
        'env_id' => 'uuid',
        'tenant_id' => 'uuid',
        'email' => 'email',
        'name' => null,
        'given_name' => null,
        'family_name' => null,
        'picture' => null,
        'is_onboarding' => null,
        'onboarding_step' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'actor_type' => false,
		'id' => false,
		'key' => false,
		'org_id' => false,
		'project_id' => false,
		'env_id' => false,
		'tenant_id' => false,
		'email' => false,
		'name' => false,
		'given_name' => false,
		'family_name' => false,
		'picture' => false,
		'is_onboarding' => false,
		'onboarding_step' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actor_type' => 'actor_type',
        'id' => 'id',
        'key' => 'key',
        'org_id' => 'org_id',
        'project_id' => 'project_id',
        'env_id' => 'env_id',
        'tenant_id' => 'tenant_id',
        'email' => 'email',
        'name' => 'name',
        'given_name' => 'given_name',
        'family_name' => 'family_name',
        'picture' => 'picture',
        'is_onboarding' => 'is_onboarding',
        'onboarding_step' => 'onboarding_step'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actor_type' => 'setActorType',
        'id' => 'setId',
        'key' => 'setKey',
        'org_id' => 'setOrgId',
        'project_id' => 'setProjectId',
        'env_id' => 'setEnvId',
        'tenant_id' => 'setTenantId',
        'email' => 'setEmail',
        'name' => 'setName',
        'given_name' => 'setGivenName',
        'family_name' => 'setFamilyName',
        'picture' => 'setPicture',
        'is_onboarding' => 'setIsOnboarding',
        'onboarding_step' => 'setOnboardingStep'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actor_type' => 'getActorType',
        'id' => 'getId',
        'key' => 'getKey',
        'org_id' => 'getOrgId',
        'project_id' => 'getProjectId',
        'env_id' => 'getEnvId',
        'tenant_id' => 'getTenantId',
        'email' => 'getEmail',
        'name' => 'getName',
        'given_name' => 'getGivenName',
        'family_name' => 'getFamilyName',
        'picture' => 'getPicture',
        'is_onboarding' => 'getIsOnboarding',
        'onboarding_step' => 'getOnboardingStep'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const ACTOR_TYPE_USER = 'user';
    public const IS_ONBOARDING_FALSE = 'false';
    public const ONBOARDING_STEP_DONE = 'done';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActorTypeAllowableValues()
    {
        return [
            self::ACTOR_TYPE_USER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsOnboardingAllowableValues()
    {
        return [
            self::IS_ONBOARDING_FALSE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOnboardingStepAllowableValues()
    {
        return [
            self::ONBOARDING_STEP_DONE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('actor_type', $data ?? [], 'user');
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('key', $data ?? [], null);
        $this->setIfExists('org_id', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('env_id', $data ?? [], null);
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('given_name', $data ?? [], null);
        $this->setIfExists('family_name', $data ?? [], null);
        $this->setIfExists('picture', $data ?? [], null);
        $this->setIfExists('is_onboarding', $data ?? [], false);
        $this->setIfExists('onboarding_step', $data ?? [], 'done');
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getActorTypeAllowableValues();
        if (!is_null($this->container['actor_type']) && !in_array($this->container['actor_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'actor_type', must be one of '%s'",
                $this->container['actor_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['key'] === null) {
            $invalidProperties[] = "'key' can't be null";
        }
        if ($this->container['org_id'] === null) {
            $invalidProperties[] = "'org_id' can't be null";
        }
        if ($this->container['project_id'] === null) {
            $invalidProperties[] = "'project_id' can't be null";
        }
        if ($this->container['env_id'] === null) {
            $invalidProperties[] = "'env_id' can't be null";
        }
        if ($this->container['tenant_id'] === null) {
            $invalidProperties[] = "'tenant_id' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        $allowedValues = $this->getIsOnboardingAllowableValues();
        if (!is_null($this->container['is_onboarding']) && !in_array($this->container['is_onboarding'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'is_onboarding', must be one of '%s'",
                $this->container['is_onboarding'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getOnboardingStepAllowableValues();
        if (!is_null($this->container['onboarding_step']) && !in_array($this->container['onboarding_step'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'onboarding_step', must be one of '%s'",
                $this->container['onboarding_step'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actor_type
     *
     * @return string|null
     */
    public function getActorType()
    {
        return $this->container['actor_type'];
    }

    /**
     * Sets actor_type
     *
     * @param string|null $actor_type actor_type
     *
     * @return self
     */
    public function setActorType($actor_type)
    {
        $allowedValues = $this->getActorTypeAllowableValues();
        if (!is_null($actor_type) && !in_array($actor_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'actor_type', must be one of '%s'",
                    $actor_type,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($actor_type)) {
            throw new \InvalidArgumentException('non-nullable actor_type cannot be null');
        }

        $this->container['actor_type'] = $actor_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key key
     *
     * @return self
     */
    public function setKey($key)
    {

        if (is_null($key)) {
            throw new \InvalidArgumentException('non-nullable key cannot be null');
        }

        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets org_id
     *
     * @return string
     */
    public function getOrgId()
    {
        return $this->container['org_id'];
    }

    /**
     * Sets org_id
     *
     * @param string $org_id org_id
     *
     * @return self
     */
    public function setOrgId($org_id)
    {

        if (is_null($org_id)) {
            throw new \InvalidArgumentException('non-nullable org_id cannot be null');
        }

        $this->container['org_id'] = $org_id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string $project_id project_id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {

        if (is_null($project_id)) {
            throw new \InvalidArgumentException('non-nullable project_id cannot be null');
        }

        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets env_id
     *
     * @return string
     */
    public function getEnvId()
    {
        return $this->container['env_id'];
    }

    /**
     * Sets env_id
     *
     * @param string $env_id env_id
     *
     * @return self
     */
    public function setEnvId($env_id)
    {

        if (is_null($env_id)) {
            throw new \InvalidArgumentException('non-nullable env_id cannot be null');
        }

        $this->container['env_id'] = $env_id;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string $tenant_id tenant_id
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {

        if (is_null($tenant_id)) {
            throw new \InvalidArgumentException('non-nullable tenant_id cannot be null');
        }

        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email of the user controlling this account
     *
     * @return self
     */
    public function setEmail($email)
    {

        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of this user
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets given_name
     *
     * @return string|null
     */
    public function getGivenName()
    {
        return $this->container['given_name'];
    }

    /**
     * Sets given_name
     *
     * @param string|null $given_name Given name of the user
     *
     * @return self
     */
    public function setGivenName($given_name)
    {

        if (is_null($given_name)) {
            throw new \InvalidArgumentException('non-nullable given_name cannot be null');
        }

        $this->container['given_name'] = $given_name;

        return $this;
    }

    /**
     * Gets family_name
     *
     * @return string|null
     */
    public function getFamilyName()
    {
        return $this->container['family_name'];
    }

    /**
     * Sets family_name
     *
     * @param string|null $family_name Family name of the user
     *
     * @return self
     */
    public function setFamilyName($family_name)
    {

        if (is_null($family_name)) {
            throw new \InvalidArgumentException('non-nullable family_name cannot be null');
        }

        $this->container['family_name'] = $family_name;

        return $this;
    }

    /**
     * Gets picture
     *
     * @return string|null
     */
    public function getPicture()
    {
        return $this->container['picture'];
    }

    /**
     * Sets picture
     *
     * @param string|null $picture URL to picture, photo, or avatar of the user that controls this account.
     *
     * @return self
     */
    public function setPicture($picture)
    {

        if (is_null($picture)) {
            throw new \InvalidArgumentException('non-nullable picture cannot be null');
        }

        $this->container['picture'] = $picture;

        return $this;
    }

    /**
     * Gets is_onboarding
     *
     * @return bool|null
     */
    public function getIsOnboarding()
    {
        return $this->container['is_onboarding'];
    }

    /**
     * Sets is_onboarding
     *
     * @param bool|null $is_onboarding is_onboarding
     *
     * @return self
     */
    public function setIsOnboarding($is_onboarding)
    {
        $allowedValues = $this->getIsOnboardingAllowableValues();
        if (!is_null($is_onboarding) && !in_array($is_onboarding, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'is_onboarding', must be one of '%s'",
                    $is_onboarding,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($is_onboarding)) {
            throw new \InvalidArgumentException('non-nullable is_onboarding cannot be null');
        }

        $this->container['is_onboarding'] = $is_onboarding;

        return $this;
    }

    /**
     * Gets onboarding_step
     *
     * @return string|null
     */
    public function getOnboardingStep()
    {
        return $this->container['onboarding_step'];
    }

    /**
     * Sets onboarding_step
     *
     * @param string|null $onboarding_step onboarding_step
     *
     * @return self
     */
    public function setOnboardingStep($onboarding_step)
    {
        $allowedValues = $this->getOnboardingStepAllowableValues();
        if (!is_null($onboarding_step) && !in_array($onboarding_step, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'onboarding_step', must be one of '%s'",
                    $onboarding_step,
                    implode("', '", $allowedValues)
                )
            );
        }

        if (is_null($onboarding_step)) {
            throw new \InvalidArgumentException('non-nullable onboarding_step cannot be null');
        }

        $this->container['onboarding_step'] = $onboarding_step;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


