<?php
/**
 * DetailedAuditLog
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Permit.io API
 *
 * Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DetailedAuditLog Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DetailedAuditLog implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DetailedAuditLog';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'raw_data' => '\OpenAPI\Client\Model\RawData',
        'input' => 'mixed',
        'result' => 'mixed',
        'context' => 'mixed',
        'action' => 'string',
        'timestamp' => '\DateTime',
        'query' => 'string',
        'user_key' => 'string',
        'user_email' => 'string',
        'user_name' => 'string',
        'resource_type' => 'string',
        'tenant' => 'string',
        'decision' => 'bool',
        'reason' => 'string',
        'pdp_config_id' => 'string',
        'env_id' => 'string',
        'project_id' => 'string',
        'org_id' => 'string',
        'objects' => '\OpenAPI\Client\Model\AuditLogObjects'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'raw_data' => null,
        'input' => null,
        'result' => null,
        'context' => null,
        'action' => null,
        'timestamp' => 'date-time',
        'query' => null,
        'user_key' => null,
        'user_email' => null,
        'user_name' => null,
        'resource_type' => null,
        'tenant' => null,
        'decision' => null,
        'reason' => null,
        'pdp_config_id' => 'uuid',
        'env_id' => 'uuid',
        'project_id' => 'uuid',
        'org_id' => 'uuid',
        'objects' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'raw_data' => false,
		'input' => true,
		'result' => true,
		'context' => true,
		'action' => false,
		'timestamp' => false,
		'query' => false,
		'user_key' => false,
		'user_email' => false,
		'user_name' => false,
		'resource_type' => false,
		'tenant' => false,
		'decision' => false,
		'reason' => false,
		'pdp_config_id' => false,
		'env_id' => false,
		'project_id' => false,
		'org_id' => false,
		'objects' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'raw_data' => 'raw_data',
        'input' => 'input',
        'result' => 'result',
        'context' => 'context',
        'action' => 'action',
        'timestamp' => 'timestamp',
        'query' => 'query',
        'user_key' => 'user_key',
        'user_email' => 'user_email',
        'user_name' => 'user_name',
        'resource_type' => 'resource_type',
        'tenant' => 'tenant',
        'decision' => 'decision',
        'reason' => 'reason',
        'pdp_config_id' => 'pdp_config_id',
        'env_id' => 'env_id',
        'project_id' => 'project_id',
        'org_id' => 'org_id',
        'objects' => 'objects'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'raw_data' => 'setRawData',
        'input' => 'setInput',
        'result' => 'setResult',
        'context' => 'setContext',
        'action' => 'setAction',
        'timestamp' => 'setTimestamp',
        'query' => 'setQuery',
        'user_key' => 'setUserKey',
        'user_email' => 'setUserEmail',
        'user_name' => 'setUserName',
        'resource_type' => 'setResourceType',
        'tenant' => 'setTenant',
        'decision' => 'setDecision',
        'reason' => 'setReason',
        'pdp_config_id' => 'setPdpConfigId',
        'env_id' => 'setEnvId',
        'project_id' => 'setProjectId',
        'org_id' => 'setOrgId',
        'objects' => 'setObjects'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'raw_data' => 'getRawData',
        'input' => 'getInput',
        'result' => 'getResult',
        'context' => 'getContext',
        'action' => 'getAction',
        'timestamp' => 'getTimestamp',
        'query' => 'getQuery',
        'user_key' => 'getUserKey',
        'user_email' => 'getUserEmail',
        'user_name' => 'getUserName',
        'resource_type' => 'getResourceType',
        'tenant' => 'getTenant',
        'decision' => 'getDecision',
        'reason' => 'getReason',
        'pdp_config_id' => 'getPdpConfigId',
        'env_id' => 'getEnvId',
        'project_id' => 'getProjectId',
        'org_id' => 'getOrgId',
        'objects' => 'getObjects'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('raw_data', $data ?? [], null);
        $this->setIfExists('input', $data ?? [], null);
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('context', $data ?? [], null);
        $this->setIfExists('action', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('query', $data ?? [], null);
        $this->setIfExists('user_key', $data ?? [], null);
        $this->setIfExists('user_email', $data ?? [], null);
        $this->setIfExists('user_name', $data ?? [], null);
        $this->setIfExists('resource_type', $data ?? [], null);
        $this->setIfExists('tenant', $data ?? [], null);
        $this->setIfExists('decision', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('pdp_config_id', $data ?? [], null);
        $this->setIfExists('env_id', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('org_id', $data ?? [], null);
        $this->setIfExists('objects', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['raw_data'] === null) {
            $invalidProperties[] = "'raw_data' can't be null";
        }
        if ($this->container['action'] === null) {
            $invalidProperties[] = "'action' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['query'] === null) {
            $invalidProperties[] = "'query' can't be null";
        }
        if ($this->container['pdp_config_id'] === null) {
            $invalidProperties[] = "'pdp_config_id' can't be null";
        }
        if ($this->container['env_id'] === null) {
            $invalidProperties[] = "'env_id' can't be null";
        }
        if ($this->container['project_id'] === null) {
            $invalidProperties[] = "'project_id' can't be null";
        }
        if ($this->container['org_id'] === null) {
            $invalidProperties[] = "'org_id' can't be null";
        }
        if ($this->container['objects'] === null) {
            $invalidProperties[] = "'objects' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets raw_data
     *
     * @return \OpenAPI\Client\Model\RawData
     */
    public function getRawData()
    {
        return $this->container['raw_data'];
    }

    /**
     * Sets raw_data
     *
     * @param \OpenAPI\Client\Model\RawData $raw_data raw_data
     *
     * @return self
     */
    public function setRawData($raw_data)
    {

        if (is_null($raw_data)) {
            throw new \InvalidArgumentException('non-nullable raw_data cannot be null');
        }

        $this->container['raw_data'] = $raw_data;

        return $this;
    }

    /**
     * Gets input
     *
     * @return mixed|null
     */
    public function getInput()
    {
        return $this->container['input'];
    }

    /**
     * Sets input
     *
     * @param mixed|null $input input
     *
     * @return self
     */
    public function setInput($input)
    {

        if (is_null($input)) {
            array_push($this->openAPINullablesSetToNull, 'input');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('input', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['input'] = $input;

        return $this;
    }

    /**
     * Gets result
     *
     * @return mixed|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param mixed|null $result result
     *
     * @return self
     */
    public function setResult($result)
    {

        if (is_null($result)) {
            array_push($this->openAPINullablesSetToNull, 'result');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('result', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets context
     *
     * @return mixed|null
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param mixed|null $context context
     *
     * @return self
     */
    public function setContext($context)
    {

        if (is_null($context)) {
            array_push($this->openAPINullablesSetToNull, 'context');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('context', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action action
     *
     * @return self
     */
    public function setAction($action)
    {

        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
        }

        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {

        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }

        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets query
     *
     * @return string
     */
    public function getQuery()
    {
        return $this->container['query'];
    }

    /**
     * Sets query
     *
     * @param string $query query
     *
     * @return self
     */
    public function setQuery($query)
    {

        if (is_null($query)) {
            throw new \InvalidArgumentException('non-nullable query cannot be null');
        }

        $this->container['query'] = $query;

        return $this;
    }

    /**
     * Gets user_key
     *
     * @return string|null
     */
    public function getUserKey()
    {
        return $this->container['user_key'];
    }

    /**
     * Sets user_key
     *
     * @param string|null $user_key user_key
     *
     * @return self
     */
    public function setUserKey($user_key)
    {

        if (is_null($user_key)) {
            throw new \InvalidArgumentException('non-nullable user_key cannot be null');
        }

        $this->container['user_key'] = $user_key;

        return $this;
    }

    /**
     * Gets user_email
     *
     * @return string|null
     */
    public function getUserEmail()
    {
        return $this->container['user_email'];
    }

    /**
     * Sets user_email
     *
     * @param string|null $user_email user_email
     *
     * @return self
     */
    public function setUserEmail($user_email)
    {

        if (is_null($user_email)) {
            throw new \InvalidArgumentException('non-nullable user_email cannot be null');
        }

        $this->container['user_email'] = $user_email;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string|null $user_name user_name
     *
     * @return self
     */
    public function setUserName($user_name)
    {

        if (is_null($user_name)) {
            throw new \InvalidArgumentException('non-nullable user_name cannot be null');
        }

        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets resource_type
     *
     * @return string|null
     */
    public function getResourceType()
    {
        return $this->container['resource_type'];
    }

    /**
     * Sets resource_type
     *
     * @param string|null $resource_type resource_type
     *
     * @return self
     */
    public function setResourceType($resource_type)
    {

        if (is_null($resource_type)) {
            throw new \InvalidArgumentException('non-nullable resource_type cannot be null');
        }

        $this->container['resource_type'] = $resource_type;

        return $this;
    }

    /**
     * Gets tenant
     *
     * @return string|null
     */
    public function getTenant()
    {
        return $this->container['tenant'];
    }

    /**
     * Sets tenant
     *
     * @param string|null $tenant tenant
     *
     * @return self
     */
    public function setTenant($tenant)
    {

        if (is_null($tenant)) {
            throw new \InvalidArgumentException('non-nullable tenant cannot be null');
        }

        $this->container['tenant'] = $tenant;

        return $this;
    }

    /**
     * Gets decision
     *
     * @return bool|null
     */
    public function getDecision()
    {
        return $this->container['decision'];
    }

    /**
     * Sets decision
     *
     * @param bool|null $decision decision
     *
     * @return self
     */
    public function setDecision($decision)
    {

        if (is_null($decision)) {
            throw new \InvalidArgumentException('non-nullable decision cannot be null');
        }

        $this->container['decision'] = $decision;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason reason
     *
     * @return self
     */
    public function setReason($reason)
    {

        if (is_null($reason)) {
            throw new \InvalidArgumentException('non-nullable reason cannot be null');
        }

        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets pdp_config_id
     *
     * @return string
     */
    public function getPdpConfigId()
    {
        return $this->container['pdp_config_id'];
    }

    /**
     * Sets pdp_config_id
     *
     * @param string $pdp_config_id pdp_config_id
     *
     * @return self
     */
    public function setPdpConfigId($pdp_config_id)
    {

        if (is_null($pdp_config_id)) {
            throw new \InvalidArgumentException('non-nullable pdp_config_id cannot be null');
        }

        $this->container['pdp_config_id'] = $pdp_config_id;

        return $this;
    }

    /**
     * Gets env_id
     *
     * @return string
     */
    public function getEnvId()
    {
        return $this->container['env_id'];
    }

    /**
     * Sets env_id
     *
     * @param string $env_id env_id
     *
     * @return self
     */
    public function setEnvId($env_id)
    {

        if (is_null($env_id)) {
            throw new \InvalidArgumentException('non-nullable env_id cannot be null');
        }

        $this->container['env_id'] = $env_id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string $project_id project_id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {

        if (is_null($project_id)) {
            throw new \InvalidArgumentException('non-nullable project_id cannot be null');
        }

        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets org_id
     *
     * @return string
     */
    public function getOrgId()
    {
        return $this->container['org_id'];
    }

    /**
     * Sets org_id
     *
     * @param string $org_id org_id
     *
     * @return self
     */
    public function setOrgId($org_id)
    {

        if (is_null($org_id)) {
            throw new \InvalidArgumentException('non-nullable org_id cannot be null');
        }

        $this->container['org_id'] = $org_id;

        return $this;
    }

    /**
     * Gets objects
     *
     * @return \OpenAPI\Client\Model\AuditLogObjects
     */
    public function getObjects()
    {
        return $this->container['objects'];
    }

    /**
     * Sets objects
     *
     * @param \OpenAPI\Client\Model\AuditLogObjects $objects objects
     *
     * @return self
     */
    public function setObjects($objects)
    {

        if (is_null($objects)) {
            throw new \InvalidArgumentException('non-nullable objects cannot be null');
        }

        $this->container['objects'] = $objects;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


