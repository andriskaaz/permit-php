<?php
/**
 * RelationshipTupleRead
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Permit.io API
 *
 * Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RelationshipTupleRead Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RelationshipTupleRead implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RelationshipTupleRead';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'subject' => 'string',
        'relation' => 'string',
        'object' => 'string',
        'id' => 'string',
        'tenant' => 'string',
        'subject_id' => 'string',
        'relation_id' => 'string',
        'object_id' => 'string',
        'tenant_id' => 'string',
        'organization_id' => 'string',
        'project_id' => 'string',
        'environment_id' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'subject_details' => '\OpenAPI\Client\Model\ResourceInstanceBlockRead',
        'relation_details' => '\OpenAPI\Client\Model\StrippedRelationBlockRead',
        'object_details' => '\OpenAPI\Client\Model\ResourceInstanceBlockRead',
        'tenant_details' => '\OpenAPI\Client\Model\TenantBlockRead'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'subject' => null,
        'relation' => null,
        'object' => null,
        'id' => 'uuid',
        'tenant' => null,
        'subject_id' => 'uuid',
        'relation_id' => 'uuid',
        'object_id' => 'uuid',
        'tenant_id' => 'uuid',
        'organization_id' => 'uuid',
        'project_id' => 'uuid',
        'environment_id' => 'uuid',
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'subject_details' => null,
        'relation_details' => null,
        'object_details' => null,
        'tenant_details' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'subject' => false,
        'relation' => false,
        'object' => false,
        'id' => false,
        'tenant' => false,
        'subject_id' => false,
        'relation_id' => false,
        'object_id' => false,
        'tenant_id' => false,
        'organization_id' => false,
        'project_id' => false,
        'environment_id' => false,
        'created_at' => false,
        'updated_at' => false,
        'subject_details' => false,
        'relation_details' => false,
        'object_details' => false,
        'tenant_details' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subject' => 'subject',
        'relation' => 'relation',
        'object' => 'object',
        'id' => 'id',
        'tenant' => 'tenant',
        'subject_id' => 'subject_id',
        'relation_id' => 'relation_id',
        'object_id' => 'object_id',
        'tenant_id' => 'tenant_id',
        'organization_id' => 'organization_id',
        'project_id' => 'project_id',
        'environment_id' => 'environment_id',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'subject_details' => 'subject_details',
        'relation_details' => 'relation_details',
        'object_details' => 'object_details',
        'tenant_details' => 'tenant_details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subject' => 'setSubject',
        'relation' => 'setRelation',
        'object' => 'setObject',
        'id' => 'setId',
        'tenant' => 'setTenant',
        'subject_id' => 'setSubjectId',
        'relation_id' => 'setRelationId',
        'object_id' => 'setObjectId',
        'tenant_id' => 'setTenantId',
        'organization_id' => 'setOrganizationId',
        'project_id' => 'setProjectId',
        'environment_id' => 'setEnvironmentId',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'subject_details' => 'setSubjectDetails',
        'relation_details' => 'setRelationDetails',
        'object_details' => 'setObjectDetails',
        'tenant_details' => 'setTenantDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subject' => 'getSubject',
        'relation' => 'getRelation',
        'object' => 'getObject',
        'id' => 'getId',
        'tenant' => 'getTenant',
        'subject_id' => 'getSubjectId',
        'relation_id' => 'getRelationId',
        'object_id' => 'getObjectId',
        'tenant_id' => 'getTenantId',
        'organization_id' => 'getOrganizationId',
        'project_id' => 'getProjectId',
        'environment_id' => 'getEnvironmentId',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'subject_details' => 'getSubjectDetails',
        'relation_details' => 'getRelationDetails',
        'object_details' => 'getObjectDetails',
        'tenant_details' => 'getTenantDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('relation', $data ?? [], null);
        $this->setIfExists('object', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('tenant', $data ?? [], null);
        $this->setIfExists('subject_id', $data ?? [], null);
        $this->setIfExists('relation_id', $data ?? [], null);
        $this->setIfExists('object_id', $data ?? [], null);
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('organization_id', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('environment_id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('subject_details', $data ?? [], null);
        $this->setIfExists('relation_details', $data ?? [], null);
        $this->setIfExists('object_details', $data ?? [], null);
        $this->setIfExists('tenant_details', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ($this->container['relation'] === null) {
            $invalidProperties[] = "'relation' can't be null";
        }
        if ($this->container['object'] === null) {
            $invalidProperties[] = "'object' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['tenant'] === null) {
            $invalidProperties[] = "'tenant' can't be null";
        }
        if ($this->container['subject_id'] === null) {
            $invalidProperties[] = "'subject_id' can't be null";
        }
        if ($this->container['relation_id'] === null) {
            $invalidProperties[] = "'relation_id' can't be null";
        }
        if ($this->container['object_id'] === null) {
            $invalidProperties[] = "'object_id' can't be null";
        }
        if ($this->container['tenant_id'] === null) {
            $invalidProperties[] = "'tenant_id' can't be null";
        }
        if ($this->container['organization_id'] === null) {
            $invalidProperties[] = "'organization_id' can't be null";
        }
        if ($this->container['project_id'] === null) {
            $invalidProperties[] = "'project_id' can't be null";
        }
        if ($this->container['environment_id'] === null) {
            $invalidProperties[] = "'environment_id' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject resource_key:resource_instance_key of the subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            throw new \InvalidArgumentException('non-nullable subject cannot be null');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets relation
     *
     * @return string
     */
    public function getRelation()
    {
        return $this->container['relation'];
    }

    /**
     * Sets relation
     *
     * @param string $relation key of the assigned relation
     *
     * @return self
     */
    public function setRelation($relation)
    {
        if (is_null($relation)) {
            throw new \InvalidArgumentException('non-nullable relation cannot be null');
        }
        $this->container['relation'] = $relation;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string $object resource_key:resource_instance_key of the object
     *
     * @return self
     */
    public function setObject($object)
    {
        if (is_null($object)) {
            throw new \InvalidArgumentException('non-nullable object cannot be null');
        }
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique id of the relationship tuple
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets tenant
     *
     * @return string
     */
    public function getTenant()
    {
        return $this->container['tenant'];
    }

    /**
     * Sets tenant
     *
     * @param string $tenant The tenant the relationship tuple is associated with
     *
     * @return self
     */
    public function setTenant($tenant)
    {
        if (is_null($tenant)) {
            throw new \InvalidArgumentException('non-nullable tenant cannot be null');
        }
        $this->container['tenant'] = $tenant;

        return $this;
    }

    /**
     * Gets subject_id
     *
     * @return string
     */
    public function getSubjectId()
    {
        return $this->container['subject_id'];
    }

    /**
     * Sets subject_id
     *
     * @param string $subject_id Unique id of the subject
     *
     * @return self
     */
    public function setSubjectId($subject_id)
    {
        if (is_null($subject_id)) {
            throw new \InvalidArgumentException('non-nullable subject_id cannot be null');
        }
        $this->container['subject_id'] = $subject_id;

        return $this;
    }

    /**
     * Gets relation_id
     *
     * @return string
     */
    public function getRelationId()
    {
        return $this->container['relation_id'];
    }

    /**
     * Sets relation_id
     *
     * @param string $relation_id Unique id of the relation
     *
     * @return self
     */
    public function setRelationId($relation_id)
    {
        if (is_null($relation_id)) {
            throw new \InvalidArgumentException('non-nullable relation_id cannot be null');
        }
        $this->container['relation_id'] = $relation_id;

        return $this;
    }

    /**
     * Gets object_id
     *
     * @return string
     */
    public function getObjectId()
    {
        return $this->container['object_id'];
    }

    /**
     * Sets object_id
     *
     * @param string $object_id Unique id of the object
     *
     * @return self
     */
    public function setObjectId($object_id)
    {
        if (is_null($object_id)) {
            throw new \InvalidArgumentException('non-nullable object_id cannot be null');
        }
        $this->container['object_id'] = $object_id;

        return $this;
    }

    /**
     * Gets tenant_id
     *
     * @return string
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string $tenant_id Unique id of the tenant
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            throw new \InvalidArgumentException('non-nullable tenant_id cannot be null');
        }
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return string
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param string $organization_id Unique id of the organization that the relationship tuple belongs to.
     *
     * @return self
     */
    public function setOrganizationId($organization_id)
    {
        if (is_null($organization_id)) {
            throw new \InvalidArgumentException('non-nullable organization_id cannot be null');
        }
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param string $project_id Unique id of the project that the relationship tuple belongs to.
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        if (is_null($project_id)) {
            throw new \InvalidArgumentException('non-nullable project_id cannot be null');
        }
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets environment_id
     *
     * @return string
     */
    public function getEnvironmentId()
    {
        return $this->container['environment_id'];
    }

    /**
     * Sets environment_id
     *
     * @param string $environment_id Unique id of the environment that the relationship tuple belongs to.
     *
     * @return self
     */
    public function setEnvironmentId($environment_id)
    {
        if (is_null($environment_id)) {
            throw new \InvalidArgumentException('non-nullable environment_id cannot be null');
        }
        $this->container['environment_id'] = $environment_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Date and time when the relationship tuple was created (ISO_8601 format).
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Date and time when the relationship tuple was created (ISO_8601 format).
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets subject_details
     *
     * @return \OpenAPI\Client\Model\ResourceInstanceBlockRead|null
     */
    public function getSubjectDetails()
    {
        return $this->container['subject_details'];
    }

    /**
     * Sets subject_details
     *
     * @param \OpenAPI\Client\Model\ResourceInstanceBlockRead|null $subject_details The subject details of the relationship tuple
     *
     * @return self
     */
    public function setSubjectDetails($subject_details)
    {
        if (is_null($subject_details)) {
            throw new \InvalidArgumentException('non-nullable subject_details cannot be null');
        }
        $this->container['subject_details'] = $subject_details;

        return $this;
    }

    /**
     * Gets relation_details
     *
     * @return \OpenAPI\Client\Model\StrippedRelationBlockRead|null
     */
    public function getRelationDetails()
    {
        return $this->container['relation_details'];
    }

    /**
     * Sets relation_details
     *
     * @param \OpenAPI\Client\Model\StrippedRelationBlockRead|null $relation_details The relation details of the relationship tuple
     *
     * @return self
     */
    public function setRelationDetails($relation_details)
    {
        if (is_null($relation_details)) {
            throw new \InvalidArgumentException('non-nullable relation_details cannot be null');
        }
        $this->container['relation_details'] = $relation_details;

        return $this;
    }

    /**
     * Gets object_details
     *
     * @return \OpenAPI\Client\Model\ResourceInstanceBlockRead|null
     */
    public function getObjectDetails()
    {
        return $this->container['object_details'];
    }

    /**
     * Sets object_details
     *
     * @param \OpenAPI\Client\Model\ResourceInstanceBlockRead|null $object_details The object details of the relationship tuple
     *
     * @return self
     */
    public function setObjectDetails($object_details)
    {
        if (is_null($object_details)) {
            throw new \InvalidArgumentException('non-nullable object_details cannot be null');
        }
        $this->container['object_details'] = $object_details;

        return $this;
    }

    /**
     * Gets tenant_details
     *
     * @return \OpenAPI\Client\Model\TenantBlockRead|null
     */
    public function getTenantDetails()
    {
        return $this->container['tenant_details'];
    }

    /**
     * Sets tenant_details
     *
     * @param \OpenAPI\Client\Model\TenantBlockRead|null $tenant_details The tenant details of the relationship tuple
     *
     * @return self
     */
    public function setTenantDetails($tenant_details)
    {
        if (is_null($tenant_details)) {
            throw new \InvalidArgumentException('non-nullable tenant_details cannot be null');
        }
        $this->container['tenant_details'] = $tenant_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


