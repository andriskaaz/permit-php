<?php
/**
 * UsersElementsDataApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Permit.io API
 *
 * Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * UsersElementsDataApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UsersElementsDataApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'elementsAssignRoleToUser' => [
            'application/json',
        ],
        'elementsCreateUser' => [
            'application/json',
        ],
        'elementsDeleteUser' => [
            'application/json',
        ],
        'elementsListRoles' => [
            'application/json',
        ],
        'elementsListUsers' => [
            'application/json',
        ],
        'elementsUnassignRoleFromUser' => [
            'application/json',
        ],
        'setConfigActive' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation elementsAssignRoleToUser
     *
     * Assign role to user
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $user_id Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\ElementsUserRoleCreate $elements_user_role_create elements_user_role_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsAssignRoleToUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RoleAssignmentRead|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function elementsAssignRoleToUser($proj_id, $env_id, $elements_config_id, $user_id, $elements_user_role_create, string $contentType = self::contentTypes['elementsAssignRoleToUser'][0])
    {
        list($response) = $this->elementsAssignRoleToUserWithHttpInfo($proj_id, $env_id, $elements_config_id, $user_id, $elements_user_role_create, $contentType);
        return $response;
    }

    /**
     * Operation elementsAssignRoleToUserWithHttpInfo
     *
     * Assign role to user
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $user_id Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\ElementsUserRoleCreate $elements_user_role_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsAssignRoleToUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RoleAssignmentRead|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementsAssignRoleToUserWithHttpInfo($proj_id, $env_id, $elements_config_id, $user_id, $elements_user_role_create, string $contentType = self::contentTypes['elementsAssignRoleToUser'][0])
    {
        $request = $this->elementsAssignRoleToUserRequest($proj_id, $env_id, $elements_config_id, $user_id, $elements_user_role_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RoleAssignmentRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RoleAssignmentRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RoleAssignmentRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RoleAssignmentRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RoleAssignmentRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation elementsAssignRoleToUserAsync
     *
     * Assign role to user
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $user_id Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\ElementsUserRoleCreate $elements_user_role_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsAssignRoleToUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function elementsAssignRoleToUserAsync($proj_id, $env_id, $elements_config_id, $user_id, $elements_user_role_create, string $contentType = self::contentTypes['elementsAssignRoleToUser'][0])
    {
        return $this->elementsAssignRoleToUserAsyncWithHttpInfo($proj_id, $env_id, $elements_config_id, $user_id, $elements_user_role_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation elementsAssignRoleToUserAsyncWithHttpInfo
     *
     * Assign role to user
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $user_id Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\ElementsUserRoleCreate $elements_user_role_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsAssignRoleToUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function elementsAssignRoleToUserAsyncWithHttpInfo($proj_id, $env_id, $elements_config_id, $user_id, $elements_user_role_create, string $contentType = self::contentTypes['elementsAssignRoleToUser'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RoleAssignmentRead';
        $request = $this->elementsAssignRoleToUserRequest($proj_id, $env_id, $elements_config_id, $user_id, $elements_user_role_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'elementsAssignRoleToUser'
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $user_id Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\ElementsUserRoleCreate $elements_user_role_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsAssignRoleToUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function elementsAssignRoleToUserRequest($proj_id, $env_id, $elements_config_id, $user_id, $elements_user_role_create, string $contentType = self::contentTypes['elementsAssignRoleToUser'][0])
    {

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling elementsAssignRoleToUser'
            );
        }

        // verify the required parameter 'env_id' is set
        if ($env_id === null || (is_array($env_id) && count($env_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $env_id when calling elementsAssignRoleToUser'
            );
        }

        // verify the required parameter 'elements_config_id' is set
        if ($elements_config_id === null || (is_array($elements_config_id) && count($elements_config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $elements_config_id when calling elementsAssignRoleToUser'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling elementsAssignRoleToUser'
            );
        }

        // verify the required parameter 'elements_user_role_create' is set
        if ($elements_user_role_create === null || (is_array($elements_user_role_create) && count($elements_user_role_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $elements_user_role_create when calling elementsAssignRoleToUser'
            );
        }


        $resourcePath = '/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users/{user_id}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }
        // path params
        if ($env_id !== null) {
            $resourcePath = str_replace(
                '{' . 'env_id' . '}',
                ObjectSerializer::toPathValue($env_id),
                $resourcePath
            );
        }
        // path params
        if ($elements_config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'elements_config_id' . '}',
                ObjectSerializer::toPathValue($elements_config_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($elements_user_role_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($elements_user_role_create));
            } else {
                $httpBody = $elements_user_role_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation elementsCreateUser
     *
     * Create user
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\ElementsUserCreate $elements_user_create elements_user_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsCreateUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserRead|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function elementsCreateUser($proj_id, $env_id, $elements_config_id, $elements_user_create, string $contentType = self::contentTypes['elementsCreateUser'][0])
    {
        list($response) = $this->elementsCreateUserWithHttpInfo($proj_id, $env_id, $elements_config_id, $elements_user_create, $contentType);
        return $response;
    }

    /**
     * Operation elementsCreateUserWithHttpInfo
     *
     * Create user
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\ElementsUserCreate $elements_user_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsCreateUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserRead|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementsCreateUserWithHttpInfo($proj_id, $env_id, $elements_config_id, $elements_user_create, string $contentType = self::contentTypes['elementsCreateUser'][0])
    {
        $request = $this->elementsCreateUserRequest($proj_id, $env_id, $elements_config_id, $elements_user_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UserRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UserRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UserRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\UserRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UserRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation elementsCreateUserAsync
     *
     * Create user
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\ElementsUserCreate $elements_user_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsCreateUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function elementsCreateUserAsync($proj_id, $env_id, $elements_config_id, $elements_user_create, string $contentType = self::contentTypes['elementsCreateUser'][0])
    {
        return $this->elementsCreateUserAsyncWithHttpInfo($proj_id, $env_id, $elements_config_id, $elements_user_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation elementsCreateUserAsyncWithHttpInfo
     *
     * Create user
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\ElementsUserCreate $elements_user_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsCreateUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function elementsCreateUserAsyncWithHttpInfo($proj_id, $env_id, $elements_config_id, $elements_user_create, string $contentType = self::contentTypes['elementsCreateUser'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UserRead';
        $request = $this->elementsCreateUserRequest($proj_id, $env_id, $elements_config_id, $elements_user_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'elementsCreateUser'
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\ElementsUserCreate $elements_user_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsCreateUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function elementsCreateUserRequest($proj_id, $env_id, $elements_config_id, $elements_user_create, string $contentType = self::contentTypes['elementsCreateUser'][0])
    {

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling elementsCreateUser'
            );
        }

        // verify the required parameter 'env_id' is set
        if ($env_id === null || (is_array($env_id) && count($env_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $env_id when calling elementsCreateUser'
            );
        }

        // verify the required parameter 'elements_config_id' is set
        if ($elements_config_id === null || (is_array($elements_config_id) && count($elements_config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $elements_config_id when calling elementsCreateUser'
            );
        }

        // verify the required parameter 'elements_user_create' is set
        if ($elements_user_create === null || (is_array($elements_user_create) && count($elements_user_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $elements_user_create when calling elementsCreateUser'
            );
        }


        $resourcePath = '/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }
        // path params
        if ($env_id !== null) {
            $resourcePath = str_replace(
                '{' . 'env_id' . '}',
                ObjectSerializer::toPathValue($env_id),
                $resourcePath
            );
        }
        // path params
        if ($elements_config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'elements_config_id' . '}',
                ObjectSerializer::toPathValue($elements_config_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($elements_user_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($elements_user_create));
            } else {
                $httpBody = $elements_user_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation elementsDeleteUser
     *
     * Delete user
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $user_id Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsDeleteUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function elementsDeleteUser($proj_id, $env_id, $elements_config_id, $user_id, string $contentType = self::contentTypes['elementsDeleteUser'][0])
    {
        $this->elementsDeleteUserWithHttpInfo($proj_id, $env_id, $elements_config_id, $user_id, $contentType);
    }

    /**
     * Operation elementsDeleteUserWithHttpInfo
     *
     * Delete user
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $user_id Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsDeleteUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementsDeleteUserWithHttpInfo($proj_id, $env_id, $elements_config_id, $user_id, string $contentType = self::contentTypes['elementsDeleteUser'][0])
    {
        $request = $this->elementsDeleteUserRequest($proj_id, $env_id, $elements_config_id, $user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation elementsDeleteUserAsync
     *
     * Delete user
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $user_id Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsDeleteUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function elementsDeleteUserAsync($proj_id, $env_id, $elements_config_id, $user_id, string $contentType = self::contentTypes['elementsDeleteUser'][0])
    {
        return $this->elementsDeleteUserAsyncWithHttpInfo($proj_id, $env_id, $elements_config_id, $user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation elementsDeleteUserAsyncWithHttpInfo
     *
     * Delete user
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $user_id Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsDeleteUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function elementsDeleteUserAsyncWithHttpInfo($proj_id, $env_id, $elements_config_id, $user_id, string $contentType = self::contentTypes['elementsDeleteUser'][0])
    {
        $returnType = '';
        $request = $this->elementsDeleteUserRequest($proj_id, $env_id, $elements_config_id, $user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'elementsDeleteUser'
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $user_id Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsDeleteUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function elementsDeleteUserRequest($proj_id, $env_id, $elements_config_id, $user_id, string $contentType = self::contentTypes['elementsDeleteUser'][0])
    {

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling elementsDeleteUser'
            );
        }

        // verify the required parameter 'env_id' is set
        if ($env_id === null || (is_array($env_id) && count($env_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $env_id when calling elementsDeleteUser'
            );
        }

        // verify the required parameter 'elements_config_id' is set
        if ($elements_config_id === null || (is_array($elements_config_id) && count($elements_config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $elements_config_id when calling elementsDeleteUser'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling elementsDeleteUser'
            );
        }


        $resourcePath = '/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users/{user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }
        // path params
        if ($env_id !== null) {
            $resourcePath = str_replace(
                '{' . 'env_id' . '}',
                ObjectSerializer::toPathValue($env_id),
                $resourcePath
            );
        }
        // path params
        if ($elements_config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'elements_config_id' . '}',
                ObjectSerializer::toPathValue($elements_config_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation elementsListRoles
     *
     * List roles
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $search Text search for the email field (optional)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsListRoles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ElementsRoleRead[]|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function elementsListRoles($proj_id, $env_id, $elements_config_id, $search = null, $page = 1, $per_page = 30, string $contentType = self::contentTypes['elementsListRoles'][0])
    {
        list($response) = $this->elementsListRolesWithHttpInfo($proj_id, $env_id, $elements_config_id, $search, $page, $per_page, $contentType);
        return $response;
    }

    /**
     * Operation elementsListRolesWithHttpInfo
     *
     * List roles
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $search Text search for the email field (optional)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsListRoles'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ElementsRoleRead[]|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementsListRolesWithHttpInfo($proj_id, $env_id, $elements_config_id, $search = null, $page = 1, $per_page = 30, string $contentType = self::contentTypes['elementsListRoles'][0])
    {
        $request = $this->elementsListRolesRequest($proj_id, $env_id, $elements_config_id, $search, $page, $per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ElementsRoleRead[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ElementsRoleRead[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ElementsRoleRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ElementsRoleRead[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ElementsRoleRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation elementsListRolesAsync
     *
     * List roles
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $search Text search for the email field (optional)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsListRoles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function elementsListRolesAsync($proj_id, $env_id, $elements_config_id, $search = null, $page = 1, $per_page = 30, string $contentType = self::contentTypes['elementsListRoles'][0])
    {
        return $this->elementsListRolesAsyncWithHttpInfo($proj_id, $env_id, $elements_config_id, $search, $page, $per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation elementsListRolesAsyncWithHttpInfo
     *
     * List roles
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $search Text search for the email field (optional)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsListRoles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function elementsListRolesAsyncWithHttpInfo($proj_id, $env_id, $elements_config_id, $search = null, $page = 1, $per_page = 30, string $contentType = self::contentTypes['elementsListRoles'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ElementsRoleRead[]';
        $request = $this->elementsListRolesRequest($proj_id, $env_id, $elements_config_id, $search, $page, $per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'elementsListRoles'
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $search Text search for the email field (optional)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsListRoles'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function elementsListRolesRequest($proj_id, $env_id, $elements_config_id, $search = null, $page = 1, $per_page = 30, string $contentType = self::contentTypes['elementsListRoles'][0])
    {

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling elementsListRoles'
            );
        }

        // verify the required parameter 'env_id' is set
        if ($env_id === null || (is_array($env_id) && count($env_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $env_id when calling elementsListRoles'
            );
        }

        // verify the required parameter 'elements_config_id' is set
        if ($elements_config_id === null || (is_array($elements_config_id) && count($elements_config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $elements_config_id when calling elementsListRoles'
            );
        }


        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling UsersElementsDataApi.elementsListRoles, must be bigger than or equal to 1.');
        }
        
        if ($per_page !== null && $per_page > 100) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling UsersElementsDataApi.elementsListRoles, must be smaller than or equal to 100.');
        }
        if ($per_page !== null && $per_page < 1) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling UsersElementsDataApi.elementsListRoles, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }
        // path params
        if ($env_id !== null) {
            $resourcePath = str_replace(
                '{' . 'env_id' . '}',
                ObjectSerializer::toPathValue($env_id),
                $resourcePath
            );
        }
        // path params
        if ($elements_config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'elements_config_id' . '}',
                ObjectSerializer::toPathValue($elements_config_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation elementsListUsers
     *
     * List users
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $search Text search for the email field (optional)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsListUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PaginatedResultUserRead|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function elementsListUsers($proj_id, $env_id, $elements_config_id, $search = null, $page = 1, $per_page = 30, string $contentType = self::contentTypes['elementsListUsers'][0])
    {
        list($response) = $this->elementsListUsersWithHttpInfo($proj_id, $env_id, $elements_config_id, $search, $page, $per_page, $contentType);
        return $response;
    }

    /**
     * Operation elementsListUsersWithHttpInfo
     *
     * List users
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $search Text search for the email field (optional)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsListUsers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PaginatedResultUserRead|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementsListUsersWithHttpInfo($proj_id, $env_id, $elements_config_id, $search = null, $page = 1, $per_page = 30, string $contentType = self::contentTypes['elementsListUsers'][0])
    {
        $request = $this->elementsListUsersRequest($proj_id, $env_id, $elements_config_id, $search, $page, $per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PaginatedResultUserRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PaginatedResultUserRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PaginatedResultUserRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PaginatedResultUserRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaginatedResultUserRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation elementsListUsersAsync
     *
     * List users
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $search Text search for the email field (optional)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsListUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function elementsListUsersAsync($proj_id, $env_id, $elements_config_id, $search = null, $page = 1, $per_page = 30, string $contentType = self::contentTypes['elementsListUsers'][0])
    {
        return $this->elementsListUsersAsyncWithHttpInfo($proj_id, $env_id, $elements_config_id, $search, $page, $per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation elementsListUsersAsyncWithHttpInfo
     *
     * List users
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $search Text search for the email field (optional)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsListUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function elementsListUsersAsyncWithHttpInfo($proj_id, $env_id, $elements_config_id, $search = null, $page = 1, $per_page = 30, string $contentType = self::contentTypes['elementsListUsers'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PaginatedResultUserRead';
        $request = $this->elementsListUsersRequest($proj_id, $env_id, $elements_config_id, $search, $page, $per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'elementsListUsers'
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $search Text search for the email field (optional)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsListUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function elementsListUsersRequest($proj_id, $env_id, $elements_config_id, $search = null, $page = 1, $per_page = 30, string $contentType = self::contentTypes['elementsListUsers'][0])
    {

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling elementsListUsers'
            );
        }

        // verify the required parameter 'env_id' is set
        if ($env_id === null || (is_array($env_id) && count($env_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $env_id when calling elementsListUsers'
            );
        }

        // verify the required parameter 'elements_config_id' is set
        if ($elements_config_id === null || (is_array($elements_config_id) && count($elements_config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $elements_config_id when calling elementsListUsers'
            );
        }


        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling UsersElementsDataApi.elementsListUsers, must be bigger than or equal to 1.');
        }
        
        if ($per_page !== null && $per_page > 100) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling UsersElementsDataApi.elementsListUsers, must be smaller than or equal to 100.');
        }
        if ($per_page !== null && $per_page < 1) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling UsersElementsDataApi.elementsListUsers, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search,
            'search', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }
        // path params
        if ($env_id !== null) {
            $resourcePath = str_replace(
                '{' . 'env_id' . '}',
                ObjectSerializer::toPathValue($env_id),
                $resourcePath
            );
        }
        // path params
        if ($elements_config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'elements_config_id' . '}',
                ObjectSerializer::toPathValue($elements_config_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation elementsUnassignRoleFromUser
     *
     * Unassign role from user
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $user_id Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\ElementsUserRoleRemove $elements_user_role_remove elements_user_role_remove (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsUnassignRoleFromUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function elementsUnassignRoleFromUser($proj_id, $env_id, $elements_config_id, $user_id, $elements_user_role_remove, string $contentType = self::contentTypes['elementsUnassignRoleFromUser'][0])
    {
        $this->elementsUnassignRoleFromUserWithHttpInfo($proj_id, $env_id, $elements_config_id, $user_id, $elements_user_role_remove, $contentType);
    }

    /**
     * Operation elementsUnassignRoleFromUserWithHttpInfo
     *
     * Unassign role from user
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $user_id Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\ElementsUserRoleRemove $elements_user_role_remove (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsUnassignRoleFromUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function elementsUnassignRoleFromUserWithHttpInfo($proj_id, $env_id, $elements_config_id, $user_id, $elements_user_role_remove, string $contentType = self::contentTypes['elementsUnassignRoleFromUser'][0])
    {
        $request = $this->elementsUnassignRoleFromUserRequest($proj_id, $env_id, $elements_config_id, $user_id, $elements_user_role_remove, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation elementsUnassignRoleFromUserAsync
     *
     * Unassign role from user
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $user_id Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\ElementsUserRoleRemove $elements_user_role_remove (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsUnassignRoleFromUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function elementsUnassignRoleFromUserAsync($proj_id, $env_id, $elements_config_id, $user_id, $elements_user_role_remove, string $contentType = self::contentTypes['elementsUnassignRoleFromUser'][0])
    {
        return $this->elementsUnassignRoleFromUserAsyncWithHttpInfo($proj_id, $env_id, $elements_config_id, $user_id, $elements_user_role_remove, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation elementsUnassignRoleFromUserAsyncWithHttpInfo
     *
     * Unassign role from user
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $user_id Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\ElementsUserRoleRemove $elements_user_role_remove (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsUnassignRoleFromUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function elementsUnassignRoleFromUserAsyncWithHttpInfo($proj_id, $env_id, $elements_config_id, $user_id, $elements_user_role_remove, string $contentType = self::contentTypes['elementsUnassignRoleFromUser'][0])
    {
        $returnType = '';
        $request = $this->elementsUnassignRoleFromUserRequest($proj_id, $env_id, $elements_config_id, $user_id, $elements_user_role_remove, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'elementsUnassignRoleFromUser'
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $user_id Either the unique id of the user, or the URL-friendly key of the user (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\ElementsUserRoleRemove $elements_user_role_remove (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['elementsUnassignRoleFromUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function elementsUnassignRoleFromUserRequest($proj_id, $env_id, $elements_config_id, $user_id, $elements_user_role_remove, string $contentType = self::contentTypes['elementsUnassignRoleFromUser'][0])
    {

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling elementsUnassignRoleFromUser'
            );
        }

        // verify the required parameter 'env_id' is set
        if ($env_id === null || (is_array($env_id) && count($env_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $env_id when calling elementsUnassignRoleFromUser'
            );
        }

        // verify the required parameter 'elements_config_id' is set
        if ($elements_config_id === null || (is_array($elements_config_id) && count($elements_config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $elements_config_id when calling elementsUnassignRoleFromUser'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling elementsUnassignRoleFromUser'
            );
        }

        // verify the required parameter 'elements_user_role_remove' is set
        if ($elements_user_role_remove === null || (is_array($elements_user_role_remove) && count($elements_user_role_remove) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $elements_user_role_remove when calling elementsUnassignRoleFromUser'
            );
        }


        $resourcePath = '/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/users/{user_id}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }
        // path params
        if ($env_id !== null) {
            $resourcePath = str_replace(
                '{' . 'env_id' . '}',
                ObjectSerializer::toPathValue($env_id),
                $resourcePath
            );
        }
        // path params
        if ($elements_config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'elements_config_id' . '}',
                ObjectSerializer::toPathValue($elements_config_id),
                $resourcePath
            );
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($elements_user_role_remove)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($elements_user_role_remove));
            } else {
                $httpBody = $elements_user_role_remove;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setConfigActive
     *
     * Set Config Active
     *
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setConfigActive'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setConfigActive($elements_config_id, $proj_id, $env_id, string $contentType = self::contentTypes['setConfigActive'][0])
    {
        $this->setConfigActiveWithHttpInfo($elements_config_id, $proj_id, $env_id, $contentType);
    }

    /**
     * Operation setConfigActiveWithHttpInfo
     *
     * Set Config Active
     *
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setConfigActive'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setConfigActiveWithHttpInfo($elements_config_id, $proj_id, $env_id, string $contentType = self::contentTypes['setConfigActive'][0])
    {
        $request = $this->setConfigActiveRequest($elements_config_id, $proj_id, $env_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setConfigActiveAsync
     *
     * Set Config Active
     *
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setConfigActive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setConfigActiveAsync($elements_config_id, $proj_id, $env_id, string $contentType = self::contentTypes['setConfigActive'][0])
    {
        return $this->setConfigActiveAsyncWithHttpInfo($elements_config_id, $proj_id, $env_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setConfigActiveAsyncWithHttpInfo
     *
     * Set Config Active
     *
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setConfigActive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setConfigActiveAsyncWithHttpInfo($elements_config_id, $proj_id, $env_id, string $contentType = self::contentTypes['setConfigActive'][0])
    {
        $returnType = '';
        $request = $this->setConfigActiveRequest($elements_config_id, $proj_id, $env_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setConfigActive'
     *
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['setConfigActive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function setConfigActiveRequest($elements_config_id, $proj_id, $env_id, string $contentType = self::contentTypes['setConfigActive'][0])
    {

        // verify the required parameter 'elements_config_id' is set
        if ($elements_config_id === null || (is_array($elements_config_id) && count($elements_config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $elements_config_id when calling setConfigActive'
            );
        }

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling setConfigActive'
            );
        }

        // verify the required parameter 'env_id' is set
        if ($env_id === null || (is_array($env_id) && count($env_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $env_id when calling setConfigActive'
            );
        }


        $resourcePath = '/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/data/active';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($elements_config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'elements_config_id' . '}',
                ObjectSerializer::toPathValue($elements_config_id),
                $resourcePath
            );
        }
        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }
        // path params
        if ($env_id !== null) {
            $resourcePath = str_replace(
                '{' . 'env_id' . '}',
                ObjectSerializer::toPathValue($env_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
