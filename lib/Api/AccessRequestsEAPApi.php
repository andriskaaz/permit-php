<?php
/**
 * AccessRequestsEAPApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Permit.io API
 *
 * Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AccessRequestsEAPApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AccessRequestsEAPApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'approveAccessRequest' => [
            'application/json',
        ],
        'cancelAccessRequest' => [
            'application/json',
        ],
        'createAccessRequest' => [
            'application/json',
        ],
        'denyAccessRequest' => [
            'application/json',
        ],
        'getAccessRequest' => [
            'application/json',
        ],
        'listAccessRequests' => [
            'application/json',
        ],
        'updateAccessRequestReviewer' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation approveAccessRequest
     *
     * Approve Access Request
     *
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\AccessRequestReview $access_request_review access_request_review (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approveAccessRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AccessRequestApproved|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function approveAccessRequest($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review, string $contentType = self::contentTypes['approveAccessRequest'][0])
    {
        list($response) = $this->approveAccessRequestWithHttpInfo($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review, $contentType);
        return $response;
    }

    /**
     * Operation approveAccessRequestWithHttpInfo
     *
     * Approve Access Request
     *
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\AccessRequestReview $access_request_review (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approveAccessRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AccessRequestApproved|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function approveAccessRequestWithHttpInfo($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review, string $contentType = self::contentTypes['approveAccessRequest'][0])
    {
        $request = $this->approveAccessRequestRequest($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AccessRequestApproved' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AccessRequestApproved' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AccessRequestApproved', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AccessRequestApproved';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AccessRequestApproved',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation approveAccessRequestAsync
     *
     * Approve Access Request
     *
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\AccessRequestReview $access_request_review (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approveAccessRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveAccessRequestAsync($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review, string $contentType = self::contentTypes['approveAccessRequest'][0])
    {
        return $this->approveAccessRequestAsyncWithHttpInfo($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation approveAccessRequestAsyncWithHttpInfo
     *
     * Approve Access Request
     *
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\AccessRequestReview $access_request_review (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approveAccessRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveAccessRequestAsyncWithHttpInfo($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review, string $contentType = self::contentTypes['approveAccessRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AccessRequestApproved';
        $request = $this->approveAccessRequestRequest($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'approveAccessRequest'
     *
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\AccessRequestReview $access_request_review (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['approveAccessRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function approveAccessRequestRequest($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review, string $contentType = self::contentTypes['approveAccessRequest'][0])
    {

        // verify the required parameter 'access_request_id' is set
        if ($access_request_id === null || (is_array($access_request_id) && count($access_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $access_request_id when calling approveAccessRequest'
            );
        }

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling approveAccessRequest'
            );
        }

        // verify the required parameter 'env_id' is set
        if ($env_id === null || (is_array($env_id) && count($env_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $env_id when calling approveAccessRequest'
            );
        }

        // verify the required parameter 'elements_config_id' is set
        if ($elements_config_id === null || (is_array($elements_config_id) && count($elements_config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $elements_config_id when calling approveAccessRequest'
            );
        }

        // verify the required parameter 'access_request_review' is set
        if ($access_request_review === null || (is_array($access_request_review) && count($access_request_review) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $access_request_review when calling approveAccessRequest'
            );
        }


        $resourcePath = '/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests/{access_request_id}/approve';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($access_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'access_request_id' . '}',
                ObjectSerializer::toPathValue($access_request_id),
                $resourcePath
            );
        }
        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }
        // path params
        if ($env_id !== null) {
            $resourcePath = str_replace(
                '{' . 'env_id' . '}',
                ObjectSerializer::toPathValue($env_id),
                $resourcePath
            );
        }
        // path params
        if ($elements_config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'elements_config_id' . '}',
                ObjectSerializer::toPathValue($elements_config_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($access_request_review)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($access_request_review));
            } else {
                $httpBody = $access_request_review;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelAccessRequest
     *
     * Cancel Access Request
     *
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelAccessRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AccessRequestCanceled|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function cancelAccessRequest($access_request_id, $proj_id, $env_id, $elements_config_id, string $contentType = self::contentTypes['cancelAccessRequest'][0])
    {
        list($response) = $this->cancelAccessRequestWithHttpInfo($access_request_id, $proj_id, $env_id, $elements_config_id, $contentType);
        return $response;
    }

    /**
     * Operation cancelAccessRequestWithHttpInfo
     *
     * Cancel Access Request
     *
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelAccessRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AccessRequestCanceled|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelAccessRequestWithHttpInfo($access_request_id, $proj_id, $env_id, $elements_config_id, string $contentType = self::contentTypes['cancelAccessRequest'][0])
    {
        $request = $this->cancelAccessRequestRequest($access_request_id, $proj_id, $env_id, $elements_config_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AccessRequestCanceled' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AccessRequestCanceled' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AccessRequestCanceled', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AccessRequestCanceled';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AccessRequestCanceled',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelAccessRequestAsync
     *
     * Cancel Access Request
     *
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelAccessRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelAccessRequestAsync($access_request_id, $proj_id, $env_id, $elements_config_id, string $contentType = self::contentTypes['cancelAccessRequest'][0])
    {
        return $this->cancelAccessRequestAsyncWithHttpInfo($access_request_id, $proj_id, $env_id, $elements_config_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelAccessRequestAsyncWithHttpInfo
     *
     * Cancel Access Request
     *
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelAccessRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelAccessRequestAsyncWithHttpInfo($access_request_id, $proj_id, $env_id, $elements_config_id, string $contentType = self::contentTypes['cancelAccessRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AccessRequestCanceled';
        $request = $this->cancelAccessRequestRequest($access_request_id, $proj_id, $env_id, $elements_config_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelAccessRequest'
     *
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelAccessRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelAccessRequestRequest($access_request_id, $proj_id, $env_id, $elements_config_id, string $contentType = self::contentTypes['cancelAccessRequest'][0])
    {

        // verify the required parameter 'access_request_id' is set
        if ($access_request_id === null || (is_array($access_request_id) && count($access_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $access_request_id when calling cancelAccessRequest'
            );
        }

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling cancelAccessRequest'
            );
        }

        // verify the required parameter 'env_id' is set
        if ($env_id === null || (is_array($env_id) && count($env_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $env_id when calling cancelAccessRequest'
            );
        }

        // verify the required parameter 'elements_config_id' is set
        if ($elements_config_id === null || (is_array($elements_config_id) && count($elements_config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $elements_config_id when calling cancelAccessRequest'
            );
        }


        $resourcePath = '/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests/{access_request_id}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($access_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'access_request_id' . '}',
                ObjectSerializer::toPathValue($access_request_id),
                $resourcePath
            );
        }
        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }
        // path params
        if ($env_id !== null) {
            $resourcePath = str_replace(
                '{' . 'env_id' . '}',
                ObjectSerializer::toPathValue($env_id),
                $resourcePath
            );
        }
        // path params
        if ($elements_config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'elements_config_id' . '}',
                ObjectSerializer::toPathValue($elements_config_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAccessRequest
     *
     * Create Access Request
     *
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\AccessRequestUserCreate $access_request_user_create access_request_user_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccessRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AccessRequestRead|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function createAccessRequest($elements_config_id, $proj_id, $env_id, $access_request_user_create, string $contentType = self::contentTypes['createAccessRequest'][0])
    {
        list($response) = $this->createAccessRequestWithHttpInfo($elements_config_id, $proj_id, $env_id, $access_request_user_create, $contentType);
        return $response;
    }

    /**
     * Operation createAccessRequestWithHttpInfo
     *
     * Create Access Request
     *
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\AccessRequestUserCreate $access_request_user_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccessRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AccessRequestRead|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAccessRequestWithHttpInfo($elements_config_id, $proj_id, $env_id, $access_request_user_create, string $contentType = self::contentTypes['createAccessRequest'][0])
    {
        $request = $this->createAccessRequestRequest($elements_config_id, $proj_id, $env_id, $access_request_user_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AccessRequestRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AccessRequestRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AccessRequestRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AccessRequestRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AccessRequestRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAccessRequestAsync
     *
     * Create Access Request
     *
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\AccessRequestUserCreate $access_request_user_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccessRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccessRequestAsync($elements_config_id, $proj_id, $env_id, $access_request_user_create, string $contentType = self::contentTypes['createAccessRequest'][0])
    {
        return $this->createAccessRequestAsyncWithHttpInfo($elements_config_id, $proj_id, $env_id, $access_request_user_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAccessRequestAsyncWithHttpInfo
     *
     * Create Access Request
     *
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\AccessRequestUserCreate $access_request_user_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccessRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccessRequestAsyncWithHttpInfo($elements_config_id, $proj_id, $env_id, $access_request_user_create, string $contentType = self::contentTypes['createAccessRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AccessRequestRead';
        $request = $this->createAccessRequestRequest($elements_config_id, $proj_id, $env_id, $access_request_user_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAccessRequest'
     *
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\AccessRequestUserCreate $access_request_user_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccessRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAccessRequestRequest($elements_config_id, $proj_id, $env_id, $access_request_user_create, string $contentType = self::contentTypes['createAccessRequest'][0])
    {

        // verify the required parameter 'elements_config_id' is set
        if ($elements_config_id === null || (is_array($elements_config_id) && count($elements_config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $elements_config_id when calling createAccessRequest'
            );
        }

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling createAccessRequest'
            );
        }

        // verify the required parameter 'env_id' is set
        if ($env_id === null || (is_array($env_id) && count($env_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $env_id when calling createAccessRequest'
            );
        }

        // verify the required parameter 'access_request_user_create' is set
        if ($access_request_user_create === null || (is_array($access_request_user_create) && count($access_request_user_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $access_request_user_create when calling createAccessRequest'
            );
        }


        $resourcePath = '/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($elements_config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'elements_config_id' . '}',
                ObjectSerializer::toPathValue($elements_config_id),
                $resourcePath
            );
        }
        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }
        // path params
        if ($env_id !== null) {
            $resourcePath = str_replace(
                '{' . 'env_id' . '}',
                ObjectSerializer::toPathValue($env_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($access_request_user_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($access_request_user_create));
            } else {
                $httpBody = $access_request_user_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation denyAccessRequest
     *
     * Deny Access Request
     *
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\AccessRequestReviewDeny $access_request_review_deny access_request_review_deny (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['denyAccessRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AccessRequestDenied|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function denyAccessRequest($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review_deny, string $contentType = self::contentTypes['denyAccessRequest'][0])
    {
        list($response) = $this->denyAccessRequestWithHttpInfo($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review_deny, $contentType);
        return $response;
    }

    /**
     * Operation denyAccessRequestWithHttpInfo
     *
     * Deny Access Request
     *
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\AccessRequestReviewDeny $access_request_review_deny (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['denyAccessRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AccessRequestDenied|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function denyAccessRequestWithHttpInfo($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review_deny, string $contentType = self::contentTypes['denyAccessRequest'][0])
    {
        $request = $this->denyAccessRequestRequest($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review_deny, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AccessRequestDenied' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AccessRequestDenied' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AccessRequestDenied', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AccessRequestDenied';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AccessRequestDenied',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation denyAccessRequestAsync
     *
     * Deny Access Request
     *
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\AccessRequestReviewDeny $access_request_review_deny (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['denyAccessRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function denyAccessRequestAsync($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review_deny, string $contentType = self::contentTypes['denyAccessRequest'][0])
    {
        return $this->denyAccessRequestAsyncWithHttpInfo($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review_deny, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation denyAccessRequestAsyncWithHttpInfo
     *
     * Deny Access Request
     *
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\AccessRequestReviewDeny $access_request_review_deny (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['denyAccessRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function denyAccessRequestAsyncWithHttpInfo($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review_deny, string $contentType = self::contentTypes['denyAccessRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AccessRequestDenied';
        $request = $this->denyAccessRequestRequest($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review_deny, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'denyAccessRequest'
     *
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\AccessRequestReviewDeny $access_request_review_deny (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['denyAccessRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function denyAccessRequestRequest($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review_deny, string $contentType = self::contentTypes['denyAccessRequest'][0])
    {

        // verify the required parameter 'access_request_id' is set
        if ($access_request_id === null || (is_array($access_request_id) && count($access_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $access_request_id when calling denyAccessRequest'
            );
        }

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling denyAccessRequest'
            );
        }

        // verify the required parameter 'env_id' is set
        if ($env_id === null || (is_array($env_id) && count($env_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $env_id when calling denyAccessRequest'
            );
        }

        // verify the required parameter 'elements_config_id' is set
        if ($elements_config_id === null || (is_array($elements_config_id) && count($elements_config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $elements_config_id when calling denyAccessRequest'
            );
        }

        // verify the required parameter 'access_request_review_deny' is set
        if ($access_request_review_deny === null || (is_array($access_request_review_deny) && count($access_request_review_deny) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $access_request_review_deny when calling denyAccessRequest'
            );
        }


        $resourcePath = '/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests/{access_request_id}/deny';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($access_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'access_request_id' . '}',
                ObjectSerializer::toPathValue($access_request_id),
                $resourcePath
            );
        }
        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }
        // path params
        if ($env_id !== null) {
            $resourcePath = str_replace(
                '{' . 'env_id' . '}',
                ObjectSerializer::toPathValue($env_id),
                $resourcePath
            );
        }
        // path params
        if ($elements_config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'elements_config_id' . '}',
                ObjectSerializer::toPathValue($elements_config_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($access_request_review_deny)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($access_request_review_deny));
            } else {
                $httpBody = $access_request_review_deny;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccessRequest
     *
     * Get Access Request
     *
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AccessRequestRead|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function getAccessRequest($elements_config_id, $access_request_id, $proj_id, $env_id, $page = 1, $per_page = 30, string $contentType = self::contentTypes['getAccessRequest'][0])
    {
        list($response) = $this->getAccessRequestWithHttpInfo($elements_config_id, $access_request_id, $proj_id, $env_id, $page, $per_page, $contentType);
        return $response;
    }

    /**
     * Operation getAccessRequestWithHttpInfo
     *
     * Get Access Request
     *
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AccessRequestRead|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccessRequestWithHttpInfo($elements_config_id, $access_request_id, $proj_id, $env_id, $page = 1, $per_page = 30, string $contentType = self::contentTypes['getAccessRequest'][0])
    {
        $request = $this->getAccessRequestRequest($elements_config_id, $access_request_id, $proj_id, $env_id, $page, $per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AccessRequestRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AccessRequestRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AccessRequestRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AccessRequestRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AccessRequestRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccessRequestAsync
     *
     * Get Access Request
     *
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccessRequestAsync($elements_config_id, $access_request_id, $proj_id, $env_id, $page = 1, $per_page = 30, string $contentType = self::contentTypes['getAccessRequest'][0])
    {
        return $this->getAccessRequestAsyncWithHttpInfo($elements_config_id, $access_request_id, $proj_id, $env_id, $page, $per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccessRequestAsyncWithHttpInfo
     *
     * Get Access Request
     *
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccessRequestAsyncWithHttpInfo($elements_config_id, $access_request_id, $proj_id, $env_id, $page = 1, $per_page = 30, string $contentType = self::contentTypes['getAccessRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AccessRequestRead';
        $request = $this->getAccessRequestRequest($elements_config_id, $access_request_id, $proj_id, $env_id, $page, $per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccessRequest'
     *
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccessRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccessRequestRequest($elements_config_id, $access_request_id, $proj_id, $env_id, $page = 1, $per_page = 30, string $contentType = self::contentTypes['getAccessRequest'][0])
    {

        // verify the required parameter 'elements_config_id' is set
        if ($elements_config_id === null || (is_array($elements_config_id) && count($elements_config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $elements_config_id when calling getAccessRequest'
            );
        }

        // verify the required parameter 'access_request_id' is set
        if ($access_request_id === null || (is_array($access_request_id) && count($access_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $access_request_id when calling getAccessRequest'
            );
        }

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling getAccessRequest'
            );
        }

        // verify the required parameter 'env_id' is set
        if ($env_id === null || (is_array($env_id) && count($env_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $env_id when calling getAccessRequest'
            );
        }

        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling AccessRequestsEAPApi.getAccessRequest, must be bigger than or equal to 1.');
        }
        
        if ($per_page !== null && $per_page > 100) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling AccessRequestsEAPApi.getAccessRequest, must be smaller than or equal to 100.');
        }
        if ($per_page !== null && $per_page < 1) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling AccessRequestsEAPApi.getAccessRequest, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests/{access_request_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($elements_config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'elements_config_id' . '}',
                ObjectSerializer::toPathValue($elements_config_id),
                $resourcePath
            );
        }
        // path params
        if ($access_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'access_request_id' . '}',
                ObjectSerializer::toPathValue($access_request_id),
                $resourcePath
            );
        }
        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }
        // path params
        if ($env_id !== null) {
            $resourcePath = str_replace(
                '{' . 'env_id' . '}',
                ObjectSerializer::toPathValue($env_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAccessRequests
     *
     * List Access Requests
     *
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\RequestStatus $status Optional status filter, will only return access requests with this status. (optional)
     * @param  string $tenant Optional tenant filter, will only return access request granted in that tenant. (optional)
     * @param  string $role Optional role filter, will only return access request granted with that role. (optional)
     * @param  string $resource Optional resource filter, will only return access request granted in that resource. (optional)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $resource_instance_id For ReBAC Elements, the resource instance ID or key to work on (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAccessRequests'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PaginatedResultAccessRequestRead|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function listAccessRequests($elements_config_id, $proj_id, $env_id, $status = null, $tenant = null, $role = null, $resource = null, $page = 1, $per_page = 30, $resource_instance_id = null, string $contentType = self::contentTypes['listAccessRequests'][0])
    {
        list($response) = $this->listAccessRequestsWithHttpInfo($elements_config_id, $proj_id, $env_id, $status, $tenant, $role, $resource, $page, $per_page, $resource_instance_id, $contentType);
        return $response;
    }

    /**
     * Operation listAccessRequestsWithHttpInfo
     *
     * List Access Requests
     *
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\RequestStatus $status Optional status filter, will only return access requests with this status. (optional)
     * @param  string $tenant Optional tenant filter, will only return access request granted in that tenant. (optional)
     * @param  string $role Optional role filter, will only return access request granted with that role. (optional)
     * @param  string $resource Optional resource filter, will only return access request granted in that resource. (optional)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $resource_instance_id For ReBAC Elements, the resource instance ID or key to work on (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAccessRequests'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PaginatedResultAccessRequestRead|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAccessRequestsWithHttpInfo($elements_config_id, $proj_id, $env_id, $status = null, $tenant = null, $role = null, $resource = null, $page = 1, $per_page = 30, $resource_instance_id = null, string $contentType = self::contentTypes['listAccessRequests'][0])
    {
        $request = $this->listAccessRequestsRequest($elements_config_id, $proj_id, $env_id, $status, $tenant, $role, $resource, $page, $per_page, $resource_instance_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PaginatedResultAccessRequestRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PaginatedResultAccessRequestRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PaginatedResultAccessRequestRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PaginatedResultAccessRequestRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaginatedResultAccessRequestRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAccessRequestsAsync
     *
     * List Access Requests
     *
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\RequestStatus $status Optional status filter, will only return access requests with this status. (optional)
     * @param  string $tenant Optional tenant filter, will only return access request granted in that tenant. (optional)
     * @param  string $role Optional role filter, will only return access request granted with that role. (optional)
     * @param  string $resource Optional resource filter, will only return access request granted in that resource. (optional)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $resource_instance_id For ReBAC Elements, the resource instance ID or key to work on (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAccessRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAccessRequestsAsync($elements_config_id, $proj_id, $env_id, $status = null, $tenant = null, $role = null, $resource = null, $page = 1, $per_page = 30, $resource_instance_id = null, string $contentType = self::contentTypes['listAccessRequests'][0])
    {
        return $this->listAccessRequestsAsyncWithHttpInfo($elements_config_id, $proj_id, $env_id, $status, $tenant, $role, $resource, $page, $per_page, $resource_instance_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAccessRequestsAsyncWithHttpInfo
     *
     * List Access Requests
     *
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\RequestStatus $status Optional status filter, will only return access requests with this status. (optional)
     * @param  string $tenant Optional tenant filter, will only return access request granted in that tenant. (optional)
     * @param  string $role Optional role filter, will only return access request granted with that role. (optional)
     * @param  string $resource Optional resource filter, will only return access request granted in that resource. (optional)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $resource_instance_id For ReBAC Elements, the resource instance ID or key to work on (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAccessRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAccessRequestsAsyncWithHttpInfo($elements_config_id, $proj_id, $env_id, $status = null, $tenant = null, $role = null, $resource = null, $page = 1, $per_page = 30, $resource_instance_id = null, string $contentType = self::contentTypes['listAccessRequests'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PaginatedResultAccessRequestRead';
        $request = $this->listAccessRequestsRequest($elements_config_id, $proj_id, $env_id, $status, $tenant, $role, $resource, $page, $per_page, $resource_instance_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAccessRequests'
     *
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\RequestStatus $status Optional status filter, will only return access requests with this status. (optional)
     * @param  string $tenant Optional tenant filter, will only return access request granted in that tenant. (optional)
     * @param  string $role Optional role filter, will only return access request granted with that role. (optional)
     * @param  string $resource Optional resource filter, will only return access request granted in that resource. (optional)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $resource_instance_id For ReBAC Elements, the resource instance ID or key to work on (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAccessRequests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAccessRequestsRequest($elements_config_id, $proj_id, $env_id, $status = null, $tenant = null, $role = null, $resource = null, $page = 1, $per_page = 30, $resource_instance_id = null, string $contentType = self::contentTypes['listAccessRequests'][0])
    {

        // verify the required parameter 'elements_config_id' is set
        if ($elements_config_id === null || (is_array($elements_config_id) && count($elements_config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $elements_config_id when calling listAccessRequests'
            );
        }

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling listAccessRequests'
            );
        }

        // verify the required parameter 'env_id' is set
        if ($env_id === null || (is_array($env_id) && count($env_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $env_id when calling listAccessRequests'
            );
        }





        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling AccessRequestsEAPApi.listAccessRequests, must be bigger than or equal to 1.');
        }
        
        if ($per_page !== null && $per_page > 100) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling AccessRequestsEAPApi.listAccessRequests, must be smaller than or equal to 100.');
        }
        if ($per_page !== null && $per_page < 1) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling AccessRequestsEAPApi.listAccessRequests, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'RequestStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tenant,
            'tenant', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $role,
            'role', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $resource,
            'resource', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $resource_instance_id,
            'resource_instance_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($elements_config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'elements_config_id' . '}',
                ObjectSerializer::toPathValue($elements_config_id),
                $resourcePath
            );
        }
        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }
        // path params
        if ($env_id !== null) {
            $resourcePath = str_replace(
                '{' . 'env_id' . '}',
                ObjectSerializer::toPathValue($env_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAccessRequestReviewer
     *
     * Update Access Request Reviewer
     *
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\AccessRequestReview $access_request_review access_request_review (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccessRequestReviewer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AccessRequestRead|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function updateAccessRequestReviewer($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review, string $contentType = self::contentTypes['updateAccessRequestReviewer'][0])
    {
        list($response) = $this->updateAccessRequestReviewerWithHttpInfo($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review, $contentType);
        return $response;
    }

    /**
     * Operation updateAccessRequestReviewerWithHttpInfo
     *
     * Update Access Request Reviewer
     *
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\AccessRequestReview $access_request_review (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccessRequestReviewer'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AccessRequestRead|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAccessRequestReviewerWithHttpInfo($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review, string $contentType = self::contentTypes['updateAccessRequestReviewer'][0])
    {
        $request = $this->updateAccessRequestReviewerRequest($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AccessRequestRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AccessRequestRead' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AccessRequestRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AccessRequestRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AccessRequestRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAccessRequestReviewerAsync
     *
     * Update Access Request Reviewer
     *
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\AccessRequestReview $access_request_review (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccessRequestReviewer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccessRequestReviewerAsync($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review, string $contentType = self::contentTypes['updateAccessRequestReviewer'][0])
    {
        return $this->updateAccessRequestReviewerAsyncWithHttpInfo($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAccessRequestReviewerAsyncWithHttpInfo
     *
     * Update Access Request Reviewer
     *
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\AccessRequestReview $access_request_review (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccessRequestReviewer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccessRequestReviewerAsyncWithHttpInfo($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review, string $contentType = self::contentTypes['updateAccessRequestReviewer'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AccessRequestRead';
        $request = $this->updateAccessRequestReviewerRequest($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAccessRequestReviewer'
     *
     * @param  string $access_request_id Either the unique id of the access_request, or the URL-friendly key of the access_request (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $env_id Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $elements_config_id Either the unique id of the elements_config, or the URL-friendly key of the elements_config (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\AccessRequestReview $access_request_review (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccessRequestReviewer'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAccessRequestReviewerRequest($access_request_id, $proj_id, $env_id, $elements_config_id, $access_request_review, string $contentType = self::contentTypes['updateAccessRequestReviewer'][0])
    {

        // verify the required parameter 'access_request_id' is set
        if ($access_request_id === null || (is_array($access_request_id) && count($access_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $access_request_id when calling updateAccessRequestReviewer'
            );
        }

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling updateAccessRequestReviewer'
            );
        }

        // verify the required parameter 'env_id' is set
        if ($env_id === null || (is_array($env_id) && count($env_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $env_id when calling updateAccessRequestReviewer'
            );
        }

        // verify the required parameter 'elements_config_id' is set
        if ($elements_config_id === null || (is_array($elements_config_id) && count($elements_config_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $elements_config_id when calling updateAccessRequestReviewer'
            );
        }

        // verify the required parameter 'access_request_review' is set
        if ($access_request_review === null || (is_array($access_request_review) && count($access_request_review) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $access_request_review when calling updateAccessRequestReviewer'
            );
        }


        $resourcePath = '/v2/elements/{proj_id}/{env_id}/config/{elements_config_id}/access_requests/{access_request_id}/reviewer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($access_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'access_request_id' . '}',
                ObjectSerializer::toPathValue($access_request_id),
                $resourcePath
            );
        }
        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }
        // path params
        if ($env_id !== null) {
            $resourcePath = str_replace(
                '{' . 'env_id' . '}',
                ObjectSerializer::toPathValue($env_id),
                $resourcePath
            );
        }
        // path params
        if ($elements_config_id !== null) {
            $resourcePath = str_replace(
                '{' . 'elements_config_id' . '}',
                ObjectSerializer::toPathValue($elements_config_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($access_request_review)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($access_request_review));
            } else {
                $httpBody = $access_request_review;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
