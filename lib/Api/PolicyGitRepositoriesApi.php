<?php
/**
 * PolicyGitRepositoriesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Permit.io API
 *
 * Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PolicyGitRepositoriesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PolicyGitRepositoriesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'activatePolicyRepo' => [
            'application/json',
        ],
        'createPolicyRepo' => [
            'application/json',
        ],
        'deletePolicyRepo' => [
            'application/json',
        ],
        'disableActivePolicyRepo' => [
            'application/json',
        ],
        'getActivePolicyRepo' => [
            'application/json',
        ],
        'getPolicyRepo' => [
            'application/json',
        ],
        'listPolicyRepos' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation activatePolicyRepo
     *
     * Activate Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $repo_id Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activatePolicyRepo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProjectRead|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function activatePolicyRepo($proj_id, $repo_id, string $contentType = self::contentTypes['activatePolicyRepo'][0])
    {
        list($response) = $this->activatePolicyRepoWithHttpInfo($proj_id, $repo_id, $contentType);
        return $response;
    }

    /**
     * Operation activatePolicyRepoWithHttpInfo
     *
     * Activate Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $repo_id Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activatePolicyRepo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProjectRead|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function activatePolicyRepoWithHttpInfo($proj_id, $repo_id, string $contentType = self::contentTypes['activatePolicyRepo'][0])
    {
        $request = $this->activatePolicyRepoRequest($proj_id, $repo_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProjectRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProjectRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProjectRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProjectRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProjectRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation activatePolicyRepoAsync
     *
     * Activate Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $repo_id Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activatePolicyRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function activatePolicyRepoAsync($proj_id, $repo_id, string $contentType = self::contentTypes['activatePolicyRepo'][0])
    {
        return $this->activatePolicyRepoAsyncWithHttpInfo($proj_id, $repo_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation activatePolicyRepoAsyncWithHttpInfo
     *
     * Activate Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $repo_id Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activatePolicyRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function activatePolicyRepoAsyncWithHttpInfo($proj_id, $repo_id, string $contentType = self::contentTypes['activatePolicyRepo'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProjectRead';
        $request = $this->activatePolicyRepoRequest($proj_id, $repo_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'activatePolicyRepo'
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $repo_id Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['activatePolicyRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function activatePolicyRepoRequest($proj_id, $repo_id, string $contentType = self::contentTypes['activatePolicyRepo'][0])
    {

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling activatePolicyRepo'
            );
        }

        // verify the required parameter 'repo_id' is set
        if ($repo_id === null || (is_array($repo_id) && count($repo_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo_id when calling activatePolicyRepo'
            );
        }


        $resourcePath = '/v2/projects/{proj_id}/repos/{repo_id}/activate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }
        // path params
        if ($repo_id !== null) {
            $resourcePath = str_replace(
                '{' . 'repo_id' . '}',
                ObjectSerializer::toPathValue($repo_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createPolicyRepo
     *
     * Create Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\PolicyRepoCreate $policy_repo_create policy_repo_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPolicyRepo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PolicyRepoRead|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function createPolicyRepo($proj_id, $policy_repo_create, string $contentType = self::contentTypes['createPolicyRepo'][0])
    {
        list($response) = $this->createPolicyRepoWithHttpInfo($proj_id, $policy_repo_create, $contentType);
        return $response;
    }

    /**
     * Operation createPolicyRepoWithHttpInfo
     *
     * Create Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\PolicyRepoCreate $policy_repo_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPolicyRepo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PolicyRepoRead|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPolicyRepoWithHttpInfo($proj_id, $policy_repo_create, string $contentType = self::contentTypes['createPolicyRepo'][0])
    {
        $request = $this->createPolicyRepoRequest($proj_id, $policy_repo_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PolicyRepoRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PolicyRepoRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PolicyRepoRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PolicyRepoRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PolicyRepoRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPolicyRepoAsync
     *
     * Create Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\PolicyRepoCreate $policy_repo_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPolicyRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPolicyRepoAsync($proj_id, $policy_repo_create, string $contentType = self::contentTypes['createPolicyRepo'][0])
    {
        return $this->createPolicyRepoAsyncWithHttpInfo($proj_id, $policy_repo_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPolicyRepoAsyncWithHttpInfo
     *
     * Create Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\PolicyRepoCreate $policy_repo_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPolicyRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPolicyRepoAsyncWithHttpInfo($proj_id, $policy_repo_create, string $contentType = self::contentTypes['createPolicyRepo'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PolicyRepoRead';
        $request = $this->createPolicyRepoRequest($proj_id, $policy_repo_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPolicyRepo'
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  \OpenAPI\Client\Model\PolicyRepoCreate $policy_repo_create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPolicyRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPolicyRepoRequest($proj_id, $policy_repo_create, string $contentType = self::contentTypes['createPolicyRepo'][0])
    {

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling createPolicyRepo'
            );
        }

        // verify the required parameter 'policy_repo_create' is set
        if ($policy_repo_create === null || (is_array($policy_repo_create) && count($policy_repo_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $policy_repo_create when calling createPolicyRepo'
            );
        }


        $resourcePath = '/v2/projects/{proj_id}/repos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($policy_repo_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($policy_repo_create));
            } else {
                $httpBody = $policy_repo_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePolicyRepo
     *
     * Delete Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $repo_id Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePolicyRepo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePolicyRepo($proj_id, $repo_id, string $contentType = self::contentTypes['deletePolicyRepo'][0])
    {
        $this->deletePolicyRepoWithHttpInfo($proj_id, $repo_id, $contentType);
    }

    /**
     * Operation deletePolicyRepoWithHttpInfo
     *
     * Delete Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $repo_id Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePolicyRepo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePolicyRepoWithHttpInfo($proj_id, $repo_id, string $contentType = self::contentTypes['deletePolicyRepo'][0])
    {
        $request = $this->deletePolicyRepoRequest($proj_id, $repo_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePolicyRepoAsync
     *
     * Delete Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $repo_id Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePolicyRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePolicyRepoAsync($proj_id, $repo_id, string $contentType = self::contentTypes['deletePolicyRepo'][0])
    {
        return $this->deletePolicyRepoAsyncWithHttpInfo($proj_id, $repo_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePolicyRepoAsyncWithHttpInfo
     *
     * Delete Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $repo_id Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePolicyRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePolicyRepoAsyncWithHttpInfo($proj_id, $repo_id, string $contentType = self::contentTypes['deletePolicyRepo'][0])
    {
        $returnType = '';
        $request = $this->deletePolicyRepoRequest($proj_id, $repo_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePolicyRepo'
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $repo_id Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePolicyRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePolicyRepoRequest($proj_id, $repo_id, string $contentType = self::contentTypes['deletePolicyRepo'][0])
    {

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling deletePolicyRepo'
            );
        }

        // verify the required parameter 'repo_id' is set
        if ($repo_id === null || (is_array($repo_id) && count($repo_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo_id when calling deletePolicyRepo'
            );
        }


        $resourcePath = '/v2/projects/{proj_id}/repos/{repo_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }
        // path params
        if ($repo_id !== null) {
            $resourcePath = str_replace(
                '{' . 'repo_id' . '}',
                ObjectSerializer::toPathValue($repo_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation disableActivePolicyRepo
     *
     * Disable Active Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableActivePolicyRepo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ProjectRead|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function disableActivePolicyRepo($proj_id, string $contentType = self::contentTypes['disableActivePolicyRepo'][0])
    {
        list($response) = $this->disableActivePolicyRepoWithHttpInfo($proj_id, $contentType);
        return $response;
    }

    /**
     * Operation disableActivePolicyRepoWithHttpInfo
     *
     * Disable Active Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableActivePolicyRepo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ProjectRead|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function disableActivePolicyRepoWithHttpInfo($proj_id, string $contentType = self::contentTypes['disableActivePolicyRepo'][0])
    {
        $request = $this->disableActivePolicyRepoRequest($proj_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ProjectRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ProjectRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ProjectRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ProjectRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ProjectRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation disableActivePolicyRepoAsync
     *
     * Disable Active Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableActivePolicyRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disableActivePolicyRepoAsync($proj_id, string $contentType = self::contentTypes['disableActivePolicyRepo'][0])
    {
        return $this->disableActivePolicyRepoAsyncWithHttpInfo($proj_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation disableActivePolicyRepoAsyncWithHttpInfo
     *
     * Disable Active Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableActivePolicyRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disableActivePolicyRepoAsyncWithHttpInfo($proj_id, string $contentType = self::contentTypes['disableActivePolicyRepo'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ProjectRead';
        $request = $this->disableActivePolicyRepoRequest($proj_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'disableActivePolicyRepo'
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableActivePolicyRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function disableActivePolicyRepoRequest($proj_id, string $contentType = self::contentTypes['disableActivePolicyRepo'][0])
    {

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling disableActivePolicyRepo'
            );
        }


        $resourcePath = '/v2/projects/{proj_id}/repos/disable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getActivePolicyRepo
     *
     * Get Active Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getActivePolicyRepo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PolicyRepoRead|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function getActivePolicyRepo($proj_id, string $contentType = self::contentTypes['getActivePolicyRepo'][0])
    {
        list($response) = $this->getActivePolicyRepoWithHttpInfo($proj_id, $contentType);
        return $response;
    }

    /**
     * Operation getActivePolicyRepoWithHttpInfo
     *
     * Get Active Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getActivePolicyRepo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PolicyRepoRead|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getActivePolicyRepoWithHttpInfo($proj_id, string $contentType = self::contentTypes['getActivePolicyRepo'][0])
    {
        $request = $this->getActivePolicyRepoRequest($proj_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PolicyRepoRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PolicyRepoRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PolicyRepoRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PolicyRepoRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PolicyRepoRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getActivePolicyRepoAsync
     *
     * Get Active Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getActivePolicyRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActivePolicyRepoAsync($proj_id, string $contentType = self::contentTypes['getActivePolicyRepo'][0])
    {
        return $this->getActivePolicyRepoAsyncWithHttpInfo($proj_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getActivePolicyRepoAsyncWithHttpInfo
     *
     * Get Active Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getActivePolicyRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActivePolicyRepoAsyncWithHttpInfo($proj_id, string $contentType = self::contentTypes['getActivePolicyRepo'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PolicyRepoRead';
        $request = $this->getActivePolicyRepoRequest($proj_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getActivePolicyRepo'
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getActivePolicyRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getActivePolicyRepoRequest($proj_id, string $contentType = self::contentTypes['getActivePolicyRepo'][0])
    {

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling getActivePolicyRepo'
            );
        }


        $resourcePath = '/v2/projects/{proj_id}/repos/active';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPolicyRepo
     *
     * Get Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $repo_id Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPolicyRepo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PolicyRepoRead|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function getPolicyRepo($proj_id, $repo_id, string $contentType = self::contentTypes['getPolicyRepo'][0])
    {
        list($response) = $this->getPolicyRepoWithHttpInfo($proj_id, $repo_id, $contentType);
        return $response;
    }

    /**
     * Operation getPolicyRepoWithHttpInfo
     *
     * Get Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $repo_id Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPolicyRepo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PolicyRepoRead|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPolicyRepoWithHttpInfo($proj_id, $repo_id, string $contentType = self::contentTypes['getPolicyRepo'][0])
    {
        $request = $this->getPolicyRepoRequest($proj_id, $repo_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PolicyRepoRead' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PolicyRepoRead' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PolicyRepoRead', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PolicyRepoRead';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PolicyRepoRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPolicyRepoAsync
     *
     * Get Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $repo_id Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPolicyRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPolicyRepoAsync($proj_id, $repo_id, string $contentType = self::contentTypes['getPolicyRepo'][0])
    {
        return $this->getPolicyRepoAsyncWithHttpInfo($proj_id, $repo_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPolicyRepoAsyncWithHttpInfo
     *
     * Get Policy Repo
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $repo_id Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPolicyRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPolicyRepoAsyncWithHttpInfo($proj_id, $repo_id, string $contentType = self::contentTypes['getPolicyRepo'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PolicyRepoRead';
        $request = $this->getPolicyRepoRequest($proj_id, $repo_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPolicyRepo'
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $repo_id Either the unique id of the policy repo, or the URL-friendly key of the policy repo (i.e: the \&quot;slug\&quot;). (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPolicyRepo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPolicyRepoRequest($proj_id, $repo_id, string $contentType = self::contentTypes['getPolicyRepo'][0])
    {

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling getPolicyRepo'
            );
        }

        // verify the required parameter 'repo_id' is set
        if ($repo_id === null || (is_array($repo_id) && count($repo_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo_id when calling getPolicyRepo'
            );
        }


        $resourcePath = '/v2/projects/{proj_id}/repos/{repo_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }
        // path params
        if ($repo_id !== null) {
            $resourcePath = str_replace(
                '{' . 'repo_id' . '}',
                ObjectSerializer::toPathValue($repo_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPolicyRepos
     *
     * List Policy Repos
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPolicyRepos'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PolicyRepoRead[]|\OpenAPI\Client\Model\HTTPValidationError
     */
    public function listPolicyRepos($proj_id, $page = 1, $per_page = 30, string $contentType = self::contentTypes['listPolicyRepos'][0])
    {
        list($response) = $this->listPolicyReposWithHttpInfo($proj_id, $page, $per_page, $contentType);
        return $response;
    }

    /**
     * Operation listPolicyReposWithHttpInfo
     *
     * List Policy Repos
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPolicyRepos'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PolicyRepoRead[]|\OpenAPI\Client\Model\HTTPValidationError, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPolicyReposWithHttpInfo($proj_id, $page = 1, $per_page = 30, string $contentType = self::contentTypes['listPolicyRepos'][0])
    {
        $request = $this->listPolicyReposRequest($proj_id, $page, $per_page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PolicyRepoRead[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PolicyRepoRead[]' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PolicyRepoRead[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PolicyRepoRead[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PolicyRepoRead[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPolicyReposAsync
     *
     * List Policy Repos
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPolicyRepos'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPolicyReposAsync($proj_id, $page = 1, $per_page = 30, string $contentType = self::contentTypes['listPolicyRepos'][0])
    {
        return $this->listPolicyReposAsyncWithHttpInfo($proj_id, $page, $per_page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPolicyReposAsyncWithHttpInfo
     *
     * List Policy Repos
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPolicyRepos'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPolicyReposAsyncWithHttpInfo($proj_id, $page = 1, $per_page = 30, string $contentType = self::contentTypes['listPolicyRepos'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PolicyRepoRead[]';
        $request = $this->listPolicyReposRequest($proj_id, $page, $per_page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPolicyRepos'
     *
     * @param  string $proj_id Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param  int $page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param  int $per_page The number of results per page (max 100). (optional, default to 30)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPolicyRepos'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPolicyReposRequest($proj_id, $page = 1, $per_page = 30, string $contentType = self::contentTypes['listPolicyRepos'][0])
    {

        // verify the required parameter 'proj_id' is set
        if ($proj_id === null || (is_array($proj_id) && count($proj_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $proj_id when calling listPolicyRepos'
            );
        }

        if ($page !== null && $page < 1) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling PolicyGitRepositoriesApi.listPolicyRepos, must be bigger than or equal to 1.');
        }
        
        if ($per_page !== null && $per_page > 100) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling PolicyGitRepositoriesApi.listPolicyRepos, must be smaller than or equal to 100.');
        }
        if ($per_page !== null && $per_page < 1) {
            throw new \InvalidArgumentException('invalid value for "$per_page" when calling PolicyGitRepositoriesApi.listPolicyRepos, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v2/projects/{proj_id}/repos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $per_page,
            'per_page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($proj_id !== null) {
            $resourcePath = str_replace(
                '{' . 'proj_id' . '}',
                ObjectSerializer::toPathValue($proj_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
