<?php
/**
 * FullData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Permit.io API
 *
 * Authorization as a service
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FullData Class Doc Comment
 *
 * @category Class
 * @description This is the data structure that is used by the PDP in a manged Permit environment. The code Permit generates uses this data structure to enforce the policy and make decisions.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FullData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FullData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'use_debugger' => 'bool',
        'users' => 'array<string,\OpenAPI\Client\Model\UserData>',
        'tenants' => 'array<string,\OpenAPI\Client\Model\TenantData>',
        'roles' => 'array<string,\OpenAPI\Client\Model\RoleData>',
        'condition_set_rules' => 'array<string,array<string,array<string,string[]>>>',
        'relationships' => 'array<string,array<string,array<string,string[]>>>',
        'resource_types' => 'array<string,\OpenAPI\Client\Model\ResourceTypeData>',
        'condition_sets' => 'array<string,\OpenAPI\Client\Model\ConditionSetData>',
        'role_assignments' => 'array<string,array<string,string[]>>',
        'role_permissions' => 'array<string,array<string,\OpenAPI\Client\Model\RoleData>>',
        'mapping_rules' => 'array<string,array<string,\OpenAPI\Client\Model\MappingRulesInnerValue>[]>',
        'resource_instances' => 'array<string,\OpenAPI\Client\Model\ResourceInstanceAttributeData>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'use_debugger' => null,
        'users' => null,
        'tenants' => null,
        'roles' => null,
        'condition_set_rules' => null,
        'relationships' => null,
        'resource_types' => null,
        'condition_sets' => null,
        'role_assignments' => null,
        'role_permissions' => null,
        'mapping_rules' => null,
        'resource_instances' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'use_debugger' => false,
        'users' => false,
        'tenants' => false,
        'roles' => false,
        'condition_set_rules' => false,
        'relationships' => false,
        'resource_types' => false,
        'condition_sets' => false,
        'role_assignments' => false,
        'role_permissions' => false,
        'mapping_rules' => false,
        'resource_instances' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'use_debugger' => 'use_debugger',
        'users' => 'users',
        'tenants' => 'tenants',
        'roles' => 'roles',
        'condition_set_rules' => 'condition_set_rules',
        'relationships' => 'relationships',
        'resource_types' => 'resource_types',
        'condition_sets' => 'condition_sets',
        'role_assignments' => 'role_assignments',
        'role_permissions' => 'role_permissions',
        'mapping_rules' => 'mapping_rules',
        'resource_instances' => 'resource_instances'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'use_debugger' => 'setUseDebugger',
        'users' => 'setUsers',
        'tenants' => 'setTenants',
        'roles' => 'setRoles',
        'condition_set_rules' => 'setConditionSetRules',
        'relationships' => 'setRelationships',
        'resource_types' => 'setResourceTypes',
        'condition_sets' => 'setConditionSets',
        'role_assignments' => 'setRoleAssignments',
        'role_permissions' => 'setRolePermissions',
        'mapping_rules' => 'setMappingRules',
        'resource_instances' => 'setResourceInstances'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'use_debugger' => 'getUseDebugger',
        'users' => 'getUsers',
        'tenants' => 'getTenants',
        'roles' => 'getRoles',
        'condition_set_rules' => 'getConditionSetRules',
        'relationships' => 'getRelationships',
        'resource_types' => 'getResourceTypes',
        'condition_sets' => 'getConditionSets',
        'role_assignments' => 'getRoleAssignments',
        'role_permissions' => 'getRolePermissions',
        'mapping_rules' => 'getMappingRules',
        'resource_instances' => 'getResourceInstances'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('use_debugger', $data ?? [], true);
        $this->setIfExists('users', $data ?? [], null);
        $this->setIfExists('tenants', $data ?? [], null);
        $this->setIfExists('roles', $data ?? [], null);
        $this->setIfExists('condition_set_rules', $data ?? [], null);
        $this->setIfExists('relationships', $data ?? [], null);
        $this->setIfExists('resource_types', $data ?? [], null);
        $this->setIfExists('condition_sets', $data ?? [], null);
        $this->setIfExists('role_assignments', $data ?? [], null);
        $this->setIfExists('role_permissions', $data ?? [], null);
        $this->setIfExists('mapping_rules', $data ?? [], null);
        $this->setIfExists('resource_instances', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['users'] === null) {
            $invalidProperties[] = "'users' can't be null";
        }
        if ($this->container['tenants'] === null) {
            $invalidProperties[] = "'tenants' can't be null";
        }
        if ($this->container['roles'] === null) {
            $invalidProperties[] = "'roles' can't be null";
        }
        if ($this->container['condition_set_rules'] === null) {
            $invalidProperties[] = "'condition_set_rules' can't be null";
        }
        if ($this->container['relationships'] === null) {
            $invalidProperties[] = "'relationships' can't be null";
        }
        if ($this->container['resource_types'] === null) {
            $invalidProperties[] = "'resource_types' can't be null";
        }
        if ($this->container['condition_sets'] === null) {
            $invalidProperties[] = "'condition_sets' can't be null";
        }
        if ($this->container['role_assignments'] === null) {
            $invalidProperties[] = "'role_assignments' can't be null";
        }
        if ($this->container['role_permissions'] === null) {
            $invalidProperties[] = "'role_permissions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets use_debugger
     *
     * @return bool|null
     */
    public function getUseDebugger()
    {
        return $this->container['use_debugger'];
    }

    /**
     * Sets use_debugger
     *
     * @param bool|null $use_debugger use_debugger
     *
     * @return self
     */
    public function setUseDebugger($use_debugger)
    {
        if (is_null($use_debugger)) {
            throw new \InvalidArgumentException('non-nullable use_debugger cannot be null');
        }
        $this->container['use_debugger'] = $use_debugger;

        return $this;
    }

    /**
     * Gets users
     *
     * @return array<string,\OpenAPI\Client\Model\UserData>
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param array<string,\OpenAPI\Client\Model\UserData> $users Key-Value mapping of the users in the system. The key is the user key and the value contains some details about the user.
     *
     * @return self
     */
    public function setUsers($users)
    {
        if (is_null($users)) {
            throw new \InvalidArgumentException('non-nullable users cannot be null');
        }
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets tenants
     *
     * @return array<string,\OpenAPI\Client\Model\TenantData>
     */
    public function getTenants()
    {
        return $this->container['tenants'];
    }

    /**
     * Sets tenants
     *
     * @param array<string,\OpenAPI\Client\Model\TenantData> $tenants Key-Value mapping of the tenants in the system. The key is the tenant key and the value contains some details about the tenant.
     *
     * @return self
     */
    public function setTenants($tenants)
    {
        if (is_null($tenants)) {
            throw new \InvalidArgumentException('non-nullable tenants cannot be null');
        }
        $this->container['tenants'] = $tenants;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return array<string,\OpenAPI\Client\Model\RoleData>
     * @deprecated
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param array<string,\OpenAPI\Client\Model\RoleData> $roles Key-Value mapping of the roles in the system. The key is the role key and the value contains some details about the role.
     *
     * @return self
     * @deprecated
     */
    public function setRoles($roles)
    {
        if (is_null($roles)) {
            throw new \InvalidArgumentException('non-nullable roles cannot be null');
        }
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets condition_set_rules
     *
     * @return array<string,array<string,array<string,string[]>>>
     */
    public function getConditionSetRules()
    {
        return $this->container['condition_set_rules'];
    }

    /**
     * Sets condition_set_rules
     *
     * @param array<string,array<string,array<string,string[]>>> $condition_set_rules Key-Value mapping of the permissions for each condition set. The key is the user-set key and the value is Key-Value mapping of resource-set key to the permissions for that user-set & resource-set.The key is the resource key and the value is list of actions that the user-set can perform on that resource-set
     *
     * @return self
     */
    public function setConditionSetRules($condition_set_rules)
    {
        if (is_null($condition_set_rules)) {
            throw new \InvalidArgumentException('non-nullable condition_set_rules cannot be null');
        }
        $this->container['condition_set_rules'] = $condition_set_rules;

        return $this;
    }

    /**
     * Gets relationships
     *
     * @return array<string,array<string,array<string,string[]>>>
     */
    public function getRelationships()
    {
        return $this->container['relationships'];
    }

    /**
     * Sets relationships
     *
     * @param array<string,array<string,array<string,string[]>>> $relationships Key-Value mapping of the relationships between resources. The key is the resource instance key and the value is Key-Value mapping of relation key to a Key-Value mapping of resource ( type ) to list of instances keys.
     *
     * @return self
     */
    public function setRelationships($relationships)
    {
        if (is_null($relationships)) {
            throw new \InvalidArgumentException('non-nullable relationships cannot be null');
        }
        $this->container['relationships'] = $relationships;

        return $this;
    }

    /**
     * Gets resource_types
     *
     * @return array<string,\OpenAPI\Client\Model\ResourceTypeData>
     */
    public function getResourceTypes()
    {
        return $this->container['resource_types'];
    }

    /**
     * Sets resource_types
     *
     * @param array<string,\OpenAPI\Client\Model\ResourceTypeData> $resource_types Key-Value mapping of the resource types in the system. The key is the resource type key and the value contains some details about the resource type.
     *
     * @return self
     */
    public function setResourceTypes($resource_types)
    {
        if (is_null($resource_types)) {
            throw new \InvalidArgumentException('non-nullable resource_types cannot be null');
        }
        $this->container['resource_types'] = $resource_types;

        return $this;
    }

    /**
     * Gets condition_sets
     *
     * @return array<string,\OpenAPI\Client\Model\ConditionSetData>
     */
    public function getConditionSets()
    {
        return $this->container['condition_sets'];
    }

    /**
     * Sets condition_sets
     *
     * @param array<string,\OpenAPI\Client\Model\ConditionSetData> $condition_sets Key-Value mapping of the condition sets in the system. The key is the formatted condition set key and the value contains some details about the condition set.
     *
     * @return self
     */
    public function setConditionSets($condition_sets)
    {
        if (is_null($condition_sets)) {
            throw new \InvalidArgumentException('non-nullable condition_sets cannot be null');
        }
        $this->container['condition_sets'] = $condition_sets;

        return $this;
    }

    /**
     * Gets role_assignments
     *
     * @return array<string,array<string,string[]>>
     */
    public function getRoleAssignments()
    {
        return $this->container['role_assignments'];
    }

    /**
     * Sets role_assignments
     *
     * @param array<string,array<string,string[]>> $role_assignments Key-Value mapping of the role assignments for the users. The key is the user key and the value is Key-Value mapping of resource instance key or tenant key to list of role keys assigned to the user in that resource instance.
     *
     * @return self
     */
    public function setRoleAssignments($role_assignments)
    {
        if (is_null($role_assignments)) {
            throw new \InvalidArgumentException('non-nullable role_assignments cannot be null');
        }
        $this->container['role_assignments'] = $role_assignments;

        return $this;
    }

    /**
     * Gets role_permissions
     *
     * @return array<string,array<string,\OpenAPI\Client\Model\RoleData>>
     */
    public function getRolePermissions()
    {
        return $this->container['role_permissions'];
    }

    /**
     * Sets role_permissions
     *
     * @param array<string,array<string,\OpenAPI\Client\Model\RoleData>> $role_permissions Key-Value mapping of the permissions for each role. The key is the resource key and the value is Key-Value mapping of role key to details on the role permissions.
     *
     * @return self
     */
    public function setRolePermissions($role_permissions)
    {
        if (is_null($role_permissions)) {
            throw new \InvalidArgumentException('non-nullable role_permissions cannot be null');
        }
        $this->container['role_permissions'] = $role_permissions;

        return $this;
    }

    /**
     * Gets mapping_rules
     *
     * @return array<string,array<string,\OpenAPI\Client\Model\MappingRulesInnerValue>[]>|null
     */
    public function getMappingRules()
    {
        return $this->container['mapping_rules'];
    }

    /**
     * Sets mapping_rules
     *
     * @param array<string,array<string,\OpenAPI\Client\Model\MappingRulesInnerValue>[]>|null $mapping_rules Key-Value mapping of groups of mapping rules in the system. The key is the mapping rule group and the value is a list of mapping rules objects.We currently have only one group named 'all' which contains all the mapping rules.A mapping rule object contains, action, http_method, resource and url - all strings.
     *
     * @return self
     */
    public function setMappingRules($mapping_rules)
    {
        if (is_null($mapping_rules)) {
            throw new \InvalidArgumentException('non-nullable mapping_rules cannot be null');
        }
        $this->container['mapping_rules'] = $mapping_rules;

        return $this;
    }

    /**
     * Gets resource_instances
     *
     * @return array<string,\OpenAPI\Client\Model\ResourceInstanceAttributeData>|null
     */
    public function getResourceInstances()
    {
        return $this->container['resource_instances'];
    }

    /**
     * Sets resource_instances
     *
     * @param array<string,\OpenAPI\Client\Model\ResourceInstanceAttributeData>|null $resource_instances Key-Value mapping of the resource instances in the system. The key is the resource instance key and the value contains some details about the resource instance.
     *
     * @return self
     */
    public function setResourceInstances($resource_instances)
    {
        if (is_null($resource_instances)) {
            throw new \InvalidArgumentException('non-nullable resource_instances cannot be null');
        }
        $this->container['resource_instances'] = $resource_instances;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


